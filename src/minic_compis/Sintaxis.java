
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package minic_compis;

import java_cup.runtime.*;
import java.io.FileReader;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintaxis extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintaxis() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintaxis(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintaxis(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\155\000\002\052\003\000\002\002\004\000\002\002" +
    "\004\000\002\002\002\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\004\000" +
    "\002\003\004\000\002\004\004\000\002\005\004\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\004\000\002\007\004" +
    "\000\002\007\004\000\002\037\007\000\002\010\004\000" +
    "\002\010\002\000\002\054\005\000\002\054\002\000\002" +
    "\011\011\000\002\033\004\000\002\033\002\000\002\034" +
    "\004\000\002\034\002\000\002\035\005\000\002\035\003" +
    "\000\002\043\004\000\002\043\002\000\002\012\003\000" +
    "\002\012\003\000\002\013\007\000\002\044\004\000\002" +
    "\044\002\000\002\014\004\000\002\014\004\000\002\036" +
    "\007\000\002\015\005\000\002\055\004\000\002\055\002" +
    "\000\002\056\003\000\002\056\003\000\002\016\004\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\040\003\000\002\040\002\000\002\017\010" +
    "\000\002\042\004\000\002\042\002\000\002\020\007\000" +
    "\002\021\013\000\002\022\005\000\002\023\004\000\002" +
    "\024\007\000\002\041\005\000\002\041\003\000\002\025" +
    "\005\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\025\005\000\002\025\005\000" +
    "\002\025\005\000\002\025\005\000\002\025\005\000\002" +
    "\025\005\000\002\025\004\000\002\025\005\000\002\025" +
    "\005\000\002\025\005\000\002\025\005\000\002\025\005" +
    "\000\002\025\005\000\002\025\006\000\002\025\006\000" +
    "\002\025\004\000\002\025\006\000\002\025\010\000\002" +
    "\025\004\000\002\025\004\000\002\025\006\000\002\026" +
    "\003\000\002\026\005\000\002\026\006\000\002\027\006" +
    "\000\002\027\006\000\002\027\006\000\002\045\005\000" +
    "\002\030\006\000\002\030\010\000\002\031\003\000\002" +
    "\031\002\000\002\032\003\000\002\032\003\000\002\032" +
    "\003\000\002\032\003\000\002\032\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\323\000\026\002\ufffe\003\ufffe\004\ufffe\005\ufffe\006" +
    "\ufffe\007\ufffe\011\ufffe\012\ufffe\035\ufffe\104\ufffe\001\002" +
    "\000\026\002\001\003\023\004\017\005\011\006\021\007" +
    "\016\011\026\012\022\035\024\104\007\001\002\000\004" +
    "\002\006\001\002\000\004\002\000\001\002\000\010\035" +
    "\ufff2\053\ufff2\065\ufff2\001\002\000\006\035\324\053\070" +
    "\001\002\000\010\035\ufff5\053\ufff5\065\ufff5\001\002\000" +
    "\026\002\ufffa\003\ufffa\004\ufffa\005\ufffa\006\ufffa\007\ufffa" +
    "\011\ufffa\012\ufffa\035\ufffa\104\ufffa\001\002\000\026\002" +
    "\uffff\003\uffff\004\uffff\005\uffff\006\uffff\007\uffff\011\uffff" +
    "\012\uffff\035\uffff\104\uffff\001\002\000\026\002\ufffd\003" +
    "\ufffd\004\ufffd\005\ufffd\006\ufffd\007\ufffd\011\ufffd\012\ufffd" +
    "\035\ufffd\104\ufffd\001\002\000\004\075\323\001\002\000" +
    "\010\035\ufff3\053\ufff3\065\ufff3\001\002\000\004\035\075" +
    "\001\002\000\026\002\ufffb\003\ufffb\004\ufffb\005\ufffb\006" +
    "\ufffb\007\ufffb\011\ufffb\012\ufffb\035\ufffb\104\ufffb\001\002" +
    "\000\010\035\ufff4\053\ufff4\065\ufff4\001\002\000\004\035" +
    "\051\001\002\000\006\073\050\075\047\001\002\000\010" +
    "\035\ufff1\053\ufff1\065\ufff1\001\002\000\026\002\ufffc\003" +
    "\ufffc\004\ufffc\005\ufffc\006\ufffc\007\ufffc\011\ufffc\012\ufffc" +
    "\035\ufffc\104\ufffc\001\002\000\004\035\027\001\002\000" +
    "\010\015\031\016\uffe6\072\uffe6\001\002\000\006\016\034" +
    "\072\uffe4\001\002\000\004\035\032\001\002\000\006\016" +
    "\uffe7\072\uffe7\001\002\000\004\072\041\001\002\000\004" +
    "\035\035\001\002\000\006\072\uffe2\074\uffe2\001\002\000" +
    "\006\072\uffe5\074\037\001\002\000\004\035\040\001\002" +
    "\000\006\072\uffe3\074\uffe3\001\002\000\020\004\uffe0\005" +
    "\uffe0\006\uffe0\007\uffe0\035\uffe0\073\uffe0\104\uffe0\001\002" +
    "\000\020\004\017\005\011\006\021\007\016\035\024\073" +
    "\045\104\007\001\002\000\020\004\uffdf\005\uffdf\006\uffdf" +
    "\007\uffdf\035\uffdf\073\uffdf\104\uffdf\001\002\000\020\004" +
    "\uffe1\005\uffe1\006\uffe1\007\uffe1\035\uffe1\073\uffe1\104\uffe1" +
    "\001\002\000\026\002\uffe8\003\uffe8\004\uffe8\005\uffe8\006" +
    "\uffe8\007\uffe8\011\uffe8\012\uffe8\035\uffe8\104\uffe8\001\002" +
    "\000\020\004\uffde\005\uffde\006\uffde\007\uffde\035\uffde\073" +
    "\uffde\104\uffde\001\002\000\026\002\ufff9\003\ufff9\004\ufff9" +
    "\005\ufff9\006\ufff9\007\ufff9\011\ufff9\012\ufff9\035\ufff9\104" +
    "\ufff9\001\002\000\026\002\ufff8\003\ufff8\004\ufff8\005\ufff8" +
    "\006\ufff8\007\ufff8\011\ufff8\012\ufff8\035\ufff8\104\ufff8\001" +
    "\002\000\004\072\052\001\002\000\020\004\uffdb\005\uffdb" +
    "\006\uffdb\007\uffdb\035\uffdb\073\uffdb\104\uffdb\001\002\000" +
    "\020\004\055\005\011\006\021\007\016\035\024\073\056" +
    "\104\007\001\002\000\006\035\060\053\070\001\002\000" +
    "\004\035\060\001\002\000\026\002\uffdd\003\uffdd\004\uffdd" +
    "\005\uffdd\006\uffdd\007\uffdd\011\uffdd\012\uffdd\035\uffdd\104" +
    "\uffdd\001\002\000\020\004\uffdc\005\uffdc\006\uffdc\007\uffdc" +
    "\035\uffdc\073\uffdc\104\uffdc\001\002\000\004\064\062\001" +
    "\002\000\020\004\uffd9\005\uffd9\006\uffd9\007\uffd9\035\uffd9" +
    "\073\uffd9\104\uffd9\001\002\000\016\005\uffe9\006\uffe9\007" +
    "\uffe9\035\uffe9\065\uffeb\104\uffe9\001\002\000\004\065\072" +
    "\001\002\000\014\005\011\006\021\007\016\035\024\104" +
    "\007\001\002\000\006\035\071\053\070\001\002\000\006" +
    "\065\uffec\074\067\001\002\000\014\005\uffea\006\uffea\007" +
    "\uffea\035\uffea\104\uffea\001\002\000\010\035\ufff0\053\ufff0" +
    "\065\ufff0\001\002\000\010\065\ufff6\074\ufff6\075\ufff6\001" +
    "\002\000\004\075\073\001\002\000\020\004\uffd8\005\uffd8" +
    "\006\uffd8\007\uffd8\035\uffd8\073\uffd8\104\uffd8\001\002\000" +
    "\020\004\uffda\005\uffda\006\uffda\007\uffda\035\uffda\073\uffda" +
    "\104\uffda\001\002\000\004\064\077\001\002\000\030\002" +
    "\uffee\003\uffee\004\uffee\005\uffee\006\uffee\007\uffee\011\uffee" +
    "\012\uffee\035\uffee\073\uffee\104\uffee\001\002\000\016\005" +
    "\uffe9\006\uffe9\007\uffe9\035\uffe9\065\uffeb\104\uffe9\001\002" +
    "\000\004\065\101\001\002\000\004\072\102\001\002\000" +
    "\070\005\011\006\021\007\016\013\132\014\125\017\116" +
    "\020\137\021\124\023\126\024\133\025\127\026\121\027" +
    "\150\030\120\031\106\032\143\035\117\037\113\057\136" +
    "\064\145\072\102\073\uffd5\075\uffc9\101\114\102\111\103" +
    "\122\104\131\001\002\000\030\002\uffed\003\uffed\004\uffed" +
    "\005\uffed\006\uffed\007\uffed\011\uffed\012\uffed\035\uffed\073" +
    "\uffed\104\uffed\001\002\000\004\073\322\001\002\000\072" +
    "\005\uffcd\006\uffcd\007\uffcd\013\uffcd\014\uffcd\017\uffcd\020" +
    "\uffcd\021\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd" +
    "\027\uffcd\030\uffcd\031\uffcd\032\uffcd\035\uffcd\037\uffcd\057" +
    "\uffcd\064\uffcd\072\uffcd\073\uffcd\075\uffcd\101\uffcd\102\uffcd" +
    "\103\uffcd\104\uffcd\001\002\000\004\055\321\001\002\000" +
    "\050\036\uffbd\037\uffbd\040\uffbd\041\uffbd\042\uffbd\044\uffbd" +
    "\045\uffbd\046\uffbd\047\uffbd\050\uffbd\051\uffbd\052\uffbd\063" +
    "\uffbd\065\uffbd\070\uffbd\071\uffbd\074\uffbd\075\uffbd\076\uffbd" +
    "\001\002\000\072\005\uffcf\006\uffcf\007\uffcf\013\uffcf\014" +
    "\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf" +
    "\025\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf\035" +
    "\uffcf\037\uffcf\057\uffcf\064\uffcf\072\uffcf\073\uffcf\075\uffcf" +
    "\101\uffcf\102\uffcf\103\uffcf\104\uffcf\001\002\000\050\036" +
    "\uff98\037\uff98\040\uff98\041\uff98\042\uff98\044\uff98\045\uff98" +
    "\046\uff98\047\uff98\050\uff98\051\uff98\052\uff98\063\uff98\065" +
    "\uff98\070\uff98\071\uff98\074\uff98\075\uff98\076\uff98\001\002" +
    "\000\072\005\uffcc\006\uffcc\007\uffcc\013\uffcc\014\uffcc\017" +
    "\uffcc\020\uffcc\021\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc" +
    "\026\uffcc\027\uffcc\030\uffcc\031\uffcc\032\uffcc\035\uffcc\037" +
    "\uffcc\057\uffcc\064\uffcc\072\uffcc\073\uffcc\075\uffcc\101\uffcc" +
    "\102\uffcc\103\uffcc\104\uffcc\001\002\000\040\013\132\014" +
    "\125\025\127\026\121\030\120\031\106\032\143\035\155" +
    "\037\113\057\136\064\145\101\114\102\111\103\122\104" +
    "\152\001\002\000\050\036\uff99\037\uff99\040\uff99\041\uff99" +
    "\042\uff99\044\uff99\045\uff99\046\uff99\047\uff99\050\uff99\051" +
    "\uff99\052\uff99\063\uff99\065\uff99\070\uff99\071\uff99\074\uff99" +
    "\075\uff99\076\uff99\001\002\000\070\005\011\006\021\007" +
    "\016\013\132\014\125\017\116\020\137\021\124\023\126" +
    "\024\133\025\127\026\121\027\150\030\120\031\106\032" +
    "\143\035\117\037\113\057\136\064\145\072\102\073\uffd5" +
    "\075\uffc9\101\114\102\111\103\122\104\131\001\002\000" +
    "\004\064\307\001\002\000\052\035\ufff1\036\uffa4\037\uffa4" +
    "\040\uffa4\041\uffa4\042\uffa4\043\uffa4\044\uffa4\045\uffa4\046" +
    "\uffa4\047\uffa4\050\uffa4\051\uffa4\052\uffa4\053\ufff1\063\uffa4" +
    "\064\156\070\uffa4\075\uffa4\076\uffa4\001\002\000\004\055" +
    "\306\001\002\000\004\064\301\001\002\000\050\036\uff97" +
    "\037\uff97\040\uff97\041\uff97\042\uff97\044\uff97\045\uff97\046" +
    "\uff97\047\uff97\050\uff97\051\uff97\052\uff97\063\uff97\065\uff97" +
    "\070\uff97\071\uff97\074\uff97\075\uff97\076\uff97\001\002\000" +
    "\072\005\uffd0\006\uffd0\007\uffd0\013\uffd0\014\uffd0\017\uffd0" +
    "\020\uffd0\021\uffd0\022\uffd0\023\uffd0\024\uffd0\025\uffd0\026" +
    "\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0\035\uffd0\037\uffd0" +
    "\057\uffd0\064\uffd0\072\uffd0\073\uffd0\075\uffd0\101\uffd0\102" +
    "\uffd0\103\uffd0\104\uffd0\001\002\000\004\064\272\001\002" +
    "\000\050\036\uffbb\037\uffbb\040\uffbb\041\uffbb\042\uffbb\044" +
    "\uffbb\045\uffbb\046\uffbb\047\uffbb\050\uffbb\051\uffbb\052\uffbb" +
    "\063\uffbb\065\uffbb\070\uffbb\071\uffbb\074\uffbb\075\uffbb\076" +
    "\uffbb\001\002\000\042\013\132\014\125\025\127\026\121" +
    "\030\120\031\106\032\143\035\155\037\113\057\136\064" +
    "\145\075\uffc9\101\114\102\111\103\122\104\152\001\002" +
    "\000\004\064\265\001\002\000\072\005\uffcb\006\uffcb\007" +
    "\uffcb\013\uffcb\014\uffcb\017\uffcb\020\uffcb\021\uffcb\022\uffcb" +
    "\023\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb\030\uffcb\031" +
    "\uffcb\032\uffcb\035\uffcb\037\uffcb\057\uffcb\064\uffcb\072\uffcb" +
    "\073\uffcb\075\uffcb\101\uffcb\102\uffcb\103\uffcb\104\uffcb\001" +
    "\002\000\046\035\ufff2\036\uff96\037\uff96\040\uff96\041\uff96" +
    "\042\uff96\044\uff96\045\uff96\046\uff96\047\uff96\050\uff96\051" +
    "\uff96\052\uff96\053\ufff2\063\uff96\070\uff96\075\uff96\076\uff96" +
    "\001\002\000\050\036\uff95\037\uff95\040\uff95\041\uff95\042" +
    "\uff95\044\uff95\045\uff95\046\uff95\047\uff95\050\uff95\051\uff95" +
    "\052\uff95\063\uff95\065\uff95\070\uff95\071\uff95\074\uff95\075" +
    "\uff95\076\uff95\001\002\000\004\075\264\001\002\000\072" +
    "\005\uffd1\006\uffd1\007\uffd1\013\uffd1\014\uffd1\017\uffd1\020" +
    "\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1" +
    "\027\uffd1\030\uffd1\031\uffd1\032\uffd1\035\uffd1\037\uffd1\057" +
    "\uffd1\064\uffd1\072\uffd1\073\uffd1\075\uffd1\101\uffd1\102\uffd1" +
    "\103\uffd1\104\uffd1\001\002\000\044\036\167\037\200\040" +
    "\171\041\176\042\172\044\166\045\175\046\201\047\174" +
    "\050\164\051\173\052\177\063\170\065\uffca\070\163\075" +
    "\uffca\076\165\001\002\000\040\013\132\014\125\025\127" +
    "\026\121\030\120\031\106\032\143\035\155\037\113\057" +
    "\136\064\145\101\114\102\111\103\122\104\152\001\002" +
    "\000\004\064\257\001\002\000\052\036\uffbc\037\uffbc\040" +
    "\uffbc\041\uffbc\042\uffbc\043\255\044\uffbc\045\uffbc\046\uffbc" +
    "\047\uffbc\050\uffbc\051\uffbc\052\uffbc\063\uffbc\065\uffbc\070" +
    "\uffbc\071\uffbc\074\uffbc\075\uffbc\076\uffbc\001\002\000\070" +
    "\005\uffd4\006\uffd4\007\uffd4\013\uffd4\014\uffd4\017\uffd4\020" +
    "\uffd4\021\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4" +
    "\030\uffd4\031\uffd4\032\uffd4\035\uffd4\037\uffd4\057\uffd4\064" +
    "\uffd4\072\uffd4\073\uffd4\075\uffd4\101\uffd4\102\uffd4\103\uffd4" +
    "\104\uffd4\001\002\000\070\005\uffd3\006\uffd3\007\uffd3\013" +
    "\uffd3\014\uffd3\017\uffd3\020\uffd3\021\uffd3\023\uffd3\024\uffd3" +
    "\025\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3\035" +
    "\uffd3\037\uffd3\057\uffd3\064\uffd3\072\uffd3\073\uffd3\075\uffd3" +
    "\101\uffd3\102\uffd3\103\uffd3\104\uffd3\001\002\000\004\064" +
    "\252\001\002\000\050\036\uffba\037\uffba\040\uffba\041\uffba" +
    "\042\uffba\044\uffba\045\uffba\046\uffba\047\uffba\050\uffba\051" +
    "\uffba\052\uffba\063\uffba\065\uffba\070\uffba\071\uffba\074\uffba" +
    "\075\uffba\076\uffba\001\002\000\040\013\132\014\125\025" +
    "\127\026\121\030\120\031\106\032\143\035\155\037\113" +
    "\057\136\064\145\101\114\102\111\103\122\104\152\001" +
    "\002\000\072\005\uffce\006\uffce\007\uffce\013\uffce\014\uffce" +
    "\017\uffce\020\uffce\021\uffce\022\uffce\023\uffce\024\uffce\025" +
    "\uffce\026\uffce\027\uffce\030\uffce\031\uffce\032\uffce\035\uffce" +
    "\037\uffce\057\uffce\064\uffce\072\uffce\073\uffce\075\uffce\101" +
    "\uffce\102\uffce\103\uffce\104\uffce\001\002\000\004\075\247" +
    "\001\002\000\004\064\151\001\002\000\040\013\132\014" +
    "\125\025\127\026\121\030\120\031\106\032\143\035\155" +
    "\037\113\057\136\064\145\101\114\102\111\103\122\104" +
    "\152\001\002\000\050\036\uff96\037\uff96\040\uff96\041\uff96" +
    "\042\uff96\044\uff96\045\uff96\046\uff96\047\uff96\050\uff96\051" +
    "\uff96\052\uff96\063\uff96\065\uff96\070\uff96\071\uff96\074\uff96" +
    "\075\uff96\076\uff96\001\002\000\044\036\167\037\200\040" +
    "\171\041\176\042\172\044\166\045\175\046\201\047\174" +
    "\050\164\051\173\052\177\063\170\065\uffbf\070\163\074" +
    "\uffbf\076\165\001\002\000\006\065\245\074\161\001\002" +
    "\000\054\036\uffa4\037\uffa4\040\uffa4\041\uffa4\042\uffa4\043" +
    "\uffa4\044\uffa4\045\uffa4\046\uffa4\047\uffa4\050\uffa4\051\uffa4" +
    "\052\uffa4\063\uffa4\064\156\065\uffa4\070\uffa4\071\uffa4\074" +
    "\uffa4\075\uffa4\076\uffa4\001\002\000\042\013\132\014\125" +
    "\025\127\026\121\030\120\031\106\032\143\035\155\037" +
    "\113\057\136\064\145\065\uff9a\101\114\102\111\103\122" +
    "\104\152\001\002\000\004\065\244\001\002\000\006\065" +
    "\uff9b\074\161\001\002\000\040\013\132\014\125\025\127" +
    "\026\121\030\120\031\106\032\143\035\155\037\113\057" +
    "\136\064\145\101\114\102\111\103\122\104\152\001\002" +
    "\000\044\036\167\037\200\040\171\041\176\042\172\044" +
    "\166\045\175\046\201\047\174\050\164\051\173\052\177" +
    "\063\170\065\uffc0\070\163\074\uffc0\076\165\001\002\000" +
    "\040\013\132\014\125\025\127\026\121\030\120\031\106" +
    "\032\143\035\155\037\113\057\136\064\145\101\114\102" +
    "\111\103\122\104\152\001\002\000\040\013\132\014\125" +
    "\025\127\026\121\030\120\031\106\032\143\035\155\037" +
    "\113\057\136\064\145\101\114\102\111\103\122\104\152" +
    "\001\002\000\010\033\221\034\222\035\220\001\002\000" +
    "\040\013\132\014\125\025\127\026\121\030\120\031\106" +
    "\032\143\035\155\037\113\057\136\064\145\101\114\102" +
    "\111\103\122\104\152\001\002\000\040\013\132\014\125" +
    "\025\127\026\121\030\120\031\106\032\143\035\155\037" +
    "\113\057\136\064\145\101\114\102\111\103\122\104\152" +
    "\001\002\000\004\063\214\001\002\000\040\013\132\014" +
    "\125\025\127\026\121\030\120\031\106\032\143\035\155" +
    "\037\113\057\136\064\145\101\114\102\111\103\122\104" +
    "\152\001\002\000\040\013\132\014\125\025\127\026\121" +
    "\030\120\031\106\032\143\035\155\037\113\057\136\064" +
    "\145\101\114\102\111\103\122\104\152\001\002\000\040" +
    "\013\132\014\125\025\127\026\121\030\120\031\106\032" +
    "\143\035\155\037\113\057\136\064\145\101\114\102\111" +
    "\103\122\104\152\001\002\000\040\013\132\014\125\025" +
    "\127\026\121\030\120\031\106\032\143\035\155\037\113" +
    "\057\136\064\145\101\114\102\111\103\122\104\152\001" +
    "\002\000\040\013\132\014\125\025\127\026\121\030\120" +
    "\031\106\032\143\035\155\037\113\057\136\064\145\101" +
    "\114\102\111\103\122\104\152\001\002\000\040\013\132" +
    "\014\125\025\127\026\121\030\120\031\106\032\143\035" +
    "\155\037\113\057\136\064\145\101\114\102\111\103\122" +
    "\104\152\001\002\000\040\013\132\014\125\025\127\026" +
    "\121\030\120\031\106\032\143\035\155\037\113\057\136" +
    "\064\145\101\114\102\111\103\122\104\152\001\002\000" +
    "\040\013\132\014\125\025\127\026\121\030\120\031\106" +
    "\032\143\035\155\037\113\057\136\064\145\101\114\102" +
    "\111\103\122\104\152\001\002\000\004\046\202\001\002" +
    "\000\040\013\132\014\125\025\127\026\121\030\120\031" +
    "\106\032\143\035\155\037\113\057\136\064\145\101\114" +
    "\102\111\103\122\104\152\001\002\000\050\036\uffab\037" +
    "\uffab\040\uffab\041\uffab\042\uffab\044\uffab\045\uffab\046\uffab" +
    "\047\uffab\050\uffab\051\uffab\052\uffab\063\uffab\065\uffab\070" +
    "\uffab\071\uffab\074\uffab\075\uffab\076\uffab\001\002\000\050" +
    "\036\uffb7\037\uffb7\040\uffb7\041\uffb7\042\uffb7\044\166\045" +
    "\175\046\201\047\174\050\164\051\173\052\177\063\170" +
    "\065\uffb7\070\163\071\uffb7\074\uffb7\075\uffb7\076\165\001" +
    "\002\000\050\036\uffad\037\uffad\040\uffad\041\uffad\042\uffad" +
    "\044\uffad\045\uffad\046\uffad\047\uffad\050\uffad\051\uffad\052" +
    "\uffad\063\uffad\065\uffad\070\uffad\071\uffad\074\uffad\075\uffad" +
    "\076\uffad\001\002\000\050\036\uffb5\037\uffb5\040\uffb5\041" +
    "\uffb5\042\uffb5\044\166\045\175\046\201\047\174\050\164" +
    "\051\173\052\177\063\170\065\uffb5\070\163\071\uffb5\074" +
    "\uffb5\075\uffb5\076\165\001\002\000\050\036\uffb0\037\uffb0" +
    "\040\uffb0\041\uffb0\042\uffb0\044\uffb0\045\uffb0\046\uffb0\047" +
    "\uffb0\050\uffb0\051\uffb0\052\uffb0\063\uffb0\065\uffb0\070\uffb0" +
    "\071\uffb0\074\uffb0\075\uffb0\076\uffb0\001\002\000\050\036" +
    "\uffaf\037\uffaf\040\uffaf\041\uffaf\042\uffaf\044\uffaf\045\uffaf" +
    "\046\uffaf\047\uffaf\050\uffaf\051\uffaf\052\uffaf\063\uffaf\065" +
    "\uffaf\070\uffaf\071\uffaf\074\uffaf\075\uffaf\076\uffaf\001\002" +
    "\000\050\036\uffae\037\uffae\040\uffae\041\uffae\042\uffae\044" +
    "\uffae\045\uffae\046\uffae\047\uffae\050\uffae\051\uffae\052\uffae" +
    "\063\uffae\065\uffae\070\uffae\071\uffae\074\uffae\075\uffae\076" +
    "\uffae\001\002\000\050\036\uffb4\037\uffb4\040\uffb4\041\uffb4" +
    "\042\uffb4\044\166\045\175\046\201\047\174\050\164\051" +
    "\173\052\177\063\170\065\uffb4\070\163\071\uffb4\074\uffb4" +
    "\075\uffb4\076\165\001\002\000\050\036\uffb6\037\uffb6\040" +
    "\uffb6\041\uffb6\042\uffb6\044\166\045\175\046\201\047\174" +
    "\050\164\051\173\052\177\063\170\065\uffb6\070\163\071" +
    "\uffb6\074\uffb6\075\uffb6\076\165\001\002\000\040\013\132" +
    "\014\125\025\127\026\121\030\120\031\106\032\143\035" +
    "\155\037\113\057\136\064\145\101\114\102\111\103\122" +
    "\104\152\001\002\000\050\036\uffac\037\uffac\040\uffac\041" +
    "\uffac\042\uffac\044\uffac\045\uffac\046\uffac\047\uffac\050\uffac" +
    "\051\uffac\052\uffac\063\uffac\065\uffac\070\uffac\071\uffac\074" +
    "\uffac\075\uffac\076\uffac\001\002\000\050\036\uffb8\037\uffb8" +
    "\040\uffb8\041\uffb8\042\uffb8\044\166\045\175\046\201\047" +
    "\174\050\164\051\173\052\177\063\170\065\uffb8\070\163" +
    "\071\uffb8\074\uffb8\075\uffb8\076\165\001\002\000\050\036" +
    "\uffb2\037\uffb2\040\uffb2\041\uffb2\042\uffb2\044\uffb2\045\uffb2" +
    "\046\uffb2\047\uffb2\050\uffb2\051\uffb2\052\uffb2\063\uffb2\065" +
    "\uffb2\070\uffb2\071\uffb2\074\uffb2\075\uffb2\076\uffb2\001\002" +
    "\000\054\036\uffa3\037\uffa3\040\uffa3\041\uffa3\042\uffa3\043" +
    "\uffa3\044\uffa3\045\uffa3\046\uffa3\047\uffa3\050\uffa3\051\uffa3" +
    "\052\uffa3\063\uffa3\064\224\065\uffa3\070\uffa3\071\uffa3\074" +
    "\uffa3\075\uffa3\076\uffa3\001\002\000\004\064\235\001\002" +
    "\000\004\064\230\001\002\000\004\064\224\001\002\000" +
    "\042\013\132\014\125\025\127\026\121\030\120\031\106" +
    "\032\143\035\155\037\113\057\136\064\145\065\uff9a\101" +
    "\114\102\111\103\122\104\152\001\002\000\050\036\uff9f" +
    "\037\uff9f\040\uff9f\041\uff9f\042\uff9f\044\uff9f\045\uff9f\046" +
    "\uff9f\047\uff9f\050\uff9f\051\uff9f\052\uff9f\063\uff9f\065\uff9f" +
    "\070\uff9f\071\uff9f\074\uff9f\075\uff9f\076\uff9f\001\002\000" +
    "\004\065\227\001\002\000\050\036\uff9e\037\uff9e\040\uff9e" +
    "\041\uff9e\042\uff9e\044\uff9e\045\uff9e\046\uff9e\047\uff9e\050" +
    "\uff9e\051\uff9e\052\uff9e\063\uff9e\065\uff9e\070\uff9e\071\uff9e" +
    "\074\uff9e\075\uff9e\076\uff9e\001\002\000\040\013\132\014" +
    "\125\025\127\026\121\030\120\031\106\032\143\035\155" +
    "\037\113\057\136\064\145\101\114\102\111\103\122\104" +
    "\152\001\002\000\042\036\167\037\200\040\171\041\176" +
    "\042\172\044\166\045\175\046\201\047\174\050\164\051" +
    "\173\052\177\063\170\070\163\074\232\076\165\001\002" +
    "\000\040\013\132\014\125\025\127\026\121\030\120\031" +
    "\106\032\143\035\155\037\113\057\136\064\145\101\114" +
    "\102\111\103\122\104\152\001\002\000\042\036\167\037" +
    "\200\040\171\041\176\042\172\044\166\045\175\046\201" +
    "\047\174\050\164\051\173\052\177\063\170\065\234\070" +
    "\163\076\165\001\002\000\004\064\uff9c\001\002\000\040" +
    "\013\132\014\125\025\127\026\121\030\120\031\106\032" +
    "\143\035\155\037\113\057\136\064\145\101\114\102\111" +
    "\103\122\104\152\001\002\000\042\036\167\037\200\040" +
    "\171\041\176\042\172\044\166\045\175\046\201\047\174" +
    "\050\164\051\173\052\177\063\170\065\237\070\163\076" +
    "\165\001\002\000\004\064\uff9d\001\002\000\050\036\uffa0" +
    "\037\uffa0\040\uffa0\041\uffa0\042\uffa0\044\uffa0\045\uffa0\046" +
    "\uffa0\047\uffa0\050\uffa0\051\uffa0\052\uffa0\063\uffa0\065\uffa0" +
    "\070\uffa0\071\uffa0\074\uffa0\075\uffa0\076\uffa0\001\002\000" +
    "\050\036\uffb1\037\uffb1\040\uffb1\041\uffb1\042\uffb1\044\uffb1" +
    "\045\uffb1\046\uffb1\047\uffb1\050\uffb1\051\uffb1\052\uffb1\063" +
    "\uffb1\065\uffb1\070\uffb1\071\uffb1\074\uffb1\075\uffb1\076\uffb1" +
    "\001\002\000\042\036\167\037\200\040\171\041\176\042" +
    "\172\044\166\045\175\046\201\047\174\050\164\051\173" +
    "\052\177\063\170\070\163\071\243\076\165\001\002\000" +
    "\052\036\uffa2\037\uffa2\040\uffa2\041\uffa2\042\uffa2\043\uffa2" +
    "\044\uffa2\045\uffa2\046\uffa2\047\uffa2\050\uffa2\051\uffa2\052" +
    "\uffa2\063\uffa2\065\uffa2\070\uffa2\071\uffa2\074\uffa2\075\uffa2" +
    "\076\uffa2\001\002\000\050\036\uffa1\037\uffa1\040\uffa1\041" +
    "\uffa1\042\uffa1\044\uffa1\045\uffa1\046\uffa1\047\uffa1\050\uffa1" +
    "\051\uffa1\052\uffa1\063\uffa1\065\uffa1\070\uffa1\071\uffa1\074" +
    "\uffa1\075\uffa1\076\uffa1\001\002\000\004\075\246\001\002" +
    "\000\072\005\uffc1\006\uffc1\007\uffc1\013\uffc1\014\uffc1\017" +
    "\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1" +
    "\026\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1\035\uffc1\037" +
    "\uffc1\057\uffc1\064\uffc1\072\uffc1\073\uffc1\075\uffc1\101\uffc1" +
    "\102\uffc1\103\uffc1\104\uffc1\001\002\000\072\005\uffd2\006" +
    "\uffd2\007\uffd2\013\uffd2\014\uffd2\017\uffd2\020\uffd2\021\uffd2" +
    "\022\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030" +
    "\uffd2\031\uffd2\032\uffd2\035\uffd2\037\uffd2\057\uffd2\064\uffd2" +
    "\072\uffd2\073\uffd2\075\uffd2\101\uffd2\102\uffd2\103\uffd2\104" +
    "\uffd2\001\002\000\042\036\167\037\200\040\171\041\176" +
    "\042\172\044\166\045\175\046\201\047\174\050\164\051" +
    "\173\052\177\063\170\065\251\070\163\076\165\001\002" +
    "\000\050\036\uffb9\037\uffb9\040\uffb9\041\uffb9\042\uffb9\044" +
    "\uffb9\045\uffb9\046\uffb9\047\uffb9\050\uffb9\051\uffb9\052\uffb9" +
    "\063\uffb9\065\uffb9\070\uffb9\071\uffb9\074\uffb9\075\uffb9\076" +
    "\uffb9\001\002\000\040\013\132\014\125\025\127\026\121" +
    "\030\120\031\106\032\143\035\155\037\113\057\136\064" +
    "\145\101\114\102\111\103\122\104\152\001\002\000\042" +
    "\036\167\037\200\040\171\041\176\042\172\044\166\045" +
    "\175\046\201\047\174\050\164\051\173\052\177\063\170" +
    "\065\254\070\163\076\165\001\002\000\050\036\uffa5\037" +
    "\uffa5\040\uffa5\041\uffa5\042\uffa5\044\uffa5\045\uffa5\046\uffa5" +
    "\047\uffa5\050\uffa5\051\uffa5\052\uffa5\063\uffa5\065\uffa5\070" +
    "\uffa5\071\uffa5\074\uffa5\075\uffa5\076\uffa5\001\002\000\040" +
    "\013\132\014\125\025\127\026\121\030\120\031\106\032" +
    "\143\035\155\037\113\057\136\064\145\101\114\102\111" +
    "\103\122\104\152\001\002\000\050\036\uffbe\037\uffbe\040" +
    "\uffbe\041\uffbe\042\uffbe\044\uffbe\045\uffbe\046\uffbe\047\uffbe" +
    "\050\uffbe\051\uffbe\052\uffbe\063\uffbe\065\uffbe\070\uffbe\071" +
    "\uffbe\074\uffbe\075\uffbe\076\uffbe\001\002\000\040\013\132" +
    "\014\125\025\127\026\121\030\120\031\106\032\143\035" +
    "\155\037\113\057\136\064\145\101\114\102\111\103\122" +
    "\104\152\001\002\000\042\036\167\037\200\040\171\041" +
    "\176\042\172\044\166\045\175\046\201\047\174\050\164" +
    "\051\173\052\177\063\170\065\261\070\163\076\165\001" +
    "\002\000\060\013\132\014\125\017\116\020\137\021\124" +
    "\023\126\024\133\025\127\026\121\027\150\030\120\031" +
    "\106\032\143\035\155\037\113\057\136\064\145\072\102" +
    "\075\uffc9\101\114\102\111\103\122\104\152\001\002\000" +
    "\072\005\uffc5\006\uffc5\007\uffc5\013\uffc5\014\uffc5\017\uffc5" +
    "\020\uffc5\021\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5\026" +
    "\uffc5\027\uffc5\030\uffc5\031\uffc5\032\uffc5\035\uffc5\037\uffc5" +
    "\057\uffc5\064\uffc5\072\uffc5\073\uffc5\075\uffc5\101\uffc5\102" +
    "\uffc5\103\uffc5\104\uffc5\001\002\000\050\036\uffaa\037\uffaa" +
    "\040\uffaa\041\uffaa\042\uffaa\044\uffaa\045\uffaa\046\uffaa\047" +
    "\uffaa\050\uffaa\051\uffaa\052\uffaa\063\uffaa\065\uffaa\070\uffaa" +
    "\071\uffaa\074\uffaa\075\uffaa\076\uffaa\001\002\000\072\005" +
    "\uffc2\006\uffc2\007\uffc2\013\uffc2\014\uffc2\017\uffc2\020\uffc2" +
    "\021\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2\027" +
    "\uffc2\030\uffc2\031\uffc2\032\uffc2\035\uffc2\037\uffc2\057\uffc2" +
    "\064\uffc2\072\uffc2\073\uffc2\075\uffc2\101\uffc2\102\uffc2\103" +
    "\uffc2\104\uffc2\001\002\000\004\035\266\001\002\000\004" +
    "\065\267\001\002\000\050\036\uffa9\037\uffa9\040\uffa9\041" +
    "\uffa9\042\uffa9\044\uffa9\045\uffa9\046\uffa9\047\uffa9\050\uffa9" +
    "\051\uffa9\052\uffa9\063\uffa9\065\uffa9\070\uffa9\071\uffa9\074" +
    "\uffa9\075\uffa9\076\uffa9\001\002\000\004\075\271\001\002" +
    "\000\072\005\uffc3\006\uffc3\007\uffc3\013\uffc3\014\uffc3\017" +
    "\uffc3\020\uffc3\021\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3" +
    "\026\uffc3\027\uffc3\030\uffc3\031\uffc3\032\uffc3\035\uffc3\037" +
    "\uffc3\057\uffc3\064\uffc3\072\uffc3\073\uffc3\075\uffc3\101\uffc3" +
    "\102\uffc3\103\uffc3\104\uffc3\001\002\000\040\013\132\014" +
    "\125\025\127\026\121\030\120\031\106\032\143\035\155" +
    "\037\113\057\136\064\145\101\114\102\111\103\122\104" +
    "\152\001\002\000\042\036\167\037\200\040\171\041\176" +
    "\042\172\044\166\045\175\046\201\047\174\050\164\051" +
    "\173\052\177\063\170\065\274\070\163\076\165\001\002" +
    "\000\060\013\132\014\125\017\116\020\137\021\124\023" +
    "\126\024\133\025\127\026\121\027\150\030\120\031\106" +
    "\032\143\035\155\037\113\057\136\064\145\072\102\075" +
    "\uffc9\101\114\102\111\103\122\104\152\001\002\000\072" +
    "\005\uffc6\006\uffc6\007\uffc6\013\uffc6\014\uffc6\017\uffc6\020" +
    "\uffc6\021\uffc6\022\276\023\uffc6\024\uffc6\025\uffc6\026\uffc6" +
    "\027\uffc6\030\uffc6\031\uffc6\032\uffc6\035\uffc6\037\uffc6\057" +
    "\uffc6\064\uffc6\072\uffc6\073\uffc6\075\uffc6\101\uffc6\102\uffc6" +
    "\103\uffc6\104\uffc6\001\002\000\060\013\132\014\125\017" +
    "\116\020\137\021\124\023\126\024\133\025\127\026\121" +
    "\027\150\030\120\031\106\032\143\035\155\037\113\057" +
    "\136\064\145\072\102\075\uffc9\101\114\102\111\103\122" +
    "\104\152\001\002\000\072\005\uffc8\006\uffc8\007\uffc8\013" +
    "\uffc8\014\uffc8\017\uffc8\020\uffc8\021\uffc8\022\uffc8\023\uffc8" +
    "\024\uffc8\025\uffc8\026\uffc8\027\uffc8\030\uffc8\031\uffc8\032" +
    "\uffc8\035\uffc8\037\uffc8\057\uffc8\064\uffc8\072\uffc8\073\uffc8" +
    "\075\uffc8\101\uffc8\102\uffc8\103\uffc8\104\uffc8\001\002\000" +
    "\072\005\uffc7\006\uffc7\007\uffc7\013\uffc7\014\uffc7\017\uffc7" +
    "\020\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7\025\uffc7\026" +
    "\uffc7\027\uffc7\030\uffc7\031\uffc7\032\uffc7\035\uffc7\037\uffc7" +
    "\057\uffc7\064\uffc7\072\uffc7\073\uffc7\075\uffc7\101\uffc7\102" +
    "\uffc7\103\uffc7\104\uffc7\001\002\000\040\013\132\014\125" +
    "\025\127\026\121\030\120\031\106\032\143\035\155\037" +
    "\113\057\136\064\145\101\114\102\111\103\122\104\152" +
    "\001\002\000\042\036\167\037\200\040\171\041\176\042" +
    "\172\044\166\045\175\046\201\047\174\050\164\051\173" +
    "\052\177\063\170\070\163\074\303\076\165\001\002\000" +
    "\014\005\011\006\021\007\016\035\024\104\007\001\002" +
    "\000\006\053\070\065\305\001\002\000\050\036\uffa8\037" +
    "\uffa8\040\uffa8\041\uffa8\042\uffa8\044\uffa8\045\uffa8\046\uffa8" +
    "\047\uffa8\050\uffa8\051\uffa8\052\uffa8\063\uffa8\065\uffa8\070" +
    "\uffa8\071\uffa8\074\uffa8\075\uffa8\076\uffa8\001\002\000\050" +
    "\036\uffa7\037\uffa7\040\uffa7\041\uffa7\042\uffa7\044\uffa7\045" +
    "\uffa7\046\uffa7\047\uffa7\050\uffa7\051\uffa7\052\uffa7\063\uffa7" +
    "\065\uffa7\070\uffa7\071\uffa7\074\uffa7\075\uffa7\076\uffa7\001" +
    "\002\000\042\013\132\014\125\025\127\026\121\030\120" +
    "\031\106\032\143\035\155\037\113\057\136\064\145\075" +
    "\uffc9\101\114\102\111\103\122\104\152\001\002\000\004" +
    "\075\311\001\002\000\040\013\132\014\125\025\127\026" +
    "\121\030\120\031\106\032\143\035\155\037\113\057\136" +
    "\064\145\101\114\102\111\103\122\104\152\001\002\000" +
    "\042\036\167\037\200\040\171\041\176\042\172\044\166" +
    "\045\175\046\201\047\174\050\164\051\173\052\177\063" +
    "\170\070\163\075\313\076\165\001\002\000\042\013\132" +
    "\014\125\025\127\026\121\030\120\031\106\032\143\035" +
    "\155\037\113\057\136\064\145\065\uffc9\101\114\102\111" +
    "\103\122\104\152\001\002\000\004\065\315\001\002\000" +
    "\060\013\132\014\125\017\116\020\137\021\124\023\126" +
    "\024\133\025\127\026\121\027\150\030\120\031\106\032" +
    "\143\035\155\037\113\057\136\064\145\072\102\075\uffc9" +
    "\101\114\102\111\103\122\104\152\001\002\000\072\005" +
    "\uffc4\006\uffc4\007\uffc4\013\uffc4\014\uffc4\017\uffc4\020\uffc4" +
    "\021\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4\027" +
    "\uffc4\030\uffc4\031\uffc4\032\uffc4\035\uffc4\037\uffc4\057\uffc4" +
    "\064\uffc4\072\uffc4\073\uffc4\075\uffc4\101\uffc4\102\uffc4\103" +
    "\uffc4\104\uffc4\001\002\000\004\073\uffd6\001\002\000\050" +
    "\036\uffb3\037\uffb3\040\uffb3\041\uffb3\042\uffb3\044\166\045" +
    "\175\046\201\047\174\050\164\051\173\052\177\063\170" +
    "\065\uffb3\070\163\071\uffb3\074\uffb3\075\uffb3\076\165\001" +
    "\002\000\050\036\uffa6\037\uffa6\040\uffa6\041\uffa6\042\uffa6" +
    "\044\uffa6\045\uffa6\046\uffa6\047\uffa6\050\uffa6\051\uffa6\052" +
    "\uffa6\063\uffa6\065\uffa6\070\uffa6\071\uffa6\074\uffa6\075\uffa6" +
    "\076\uffa6\001\002\000\104\002\uffd7\003\uffd7\004\uffd7\005" +
    "\uffd7\006\uffd7\007\uffd7\011\uffd7\012\uffd7\013\uffd7\014\uffd7" +
    "\017\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7\024\uffd7\025" +
    "\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\035\uffd7" +
    "\037\uffd7\057\uffd7\064\uffd7\072\uffd7\073\uffd7\075\uffd7\101" +
    "\uffd7\102\uffd7\103\uffd7\104\uffd7\001\002\000\102\002\ufff7" +
    "\003\ufff7\004\ufff7\005\ufff7\006\ufff7\007\ufff7\011\ufff7\012" +
    "\ufff7\013\ufff7\014\ufff7\017\ufff7\020\ufff7\021\ufff7\023\ufff7" +
    "\024\ufff7\025\ufff7\026\ufff7\027\ufff7\030\ufff7\031\ufff7\032" +
    "\ufff7\035\ufff7\037\ufff7\057\ufff7\064\ufff7\072\ufff7\073\ufff7" +
    "\075\ufff7\101\ufff7\102\ufff7\103\ufff7\104\ufff7\001\002\000" +
    "\006\064\077\075\ufff6\001\002\000\030\002\uffef\003\uffef" +
    "\004\uffef\005\uffef\006\uffef\007\uffef\011\uffef\012\uffef\035" +
    "\uffef\073\uffef\104\uffef\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\323\000\006\002\003\052\004\001\001\000\020\003" +
    "\012\004\013\005\014\006\007\007\024\011\017\013\011" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\037\324\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\037\075\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\033\027\001\001\000\004\034\032\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\035\035\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\043\041\001\001" +
    "\000\014\004\042\005\014\006\007\007\045\012\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\044\052\001\001\000\006\006\053" +
    "\014\056\001\001\000\004\036\073\001\001\000\004\036" +
    "\060\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\010\062\054\063\001" +
    "\001\000\002\001\001\000\006\005\065\006\064\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\010\077\054\063\001\001\000\002\001\001" +
    "\000\004\015\102\001\001\000\046\004\140\005\014\006" +
    "\064\015\127\016\141\017\133\020\122\021\107\022\104" +
    "\023\145\024\111\025\134\026\137\027\143\032\106\040" +
    "\146\055\103\056\114\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\025\317\026\137\027\143\032\106\001\001\000" +
    "\002\001\001\000\046\004\140\005\014\006\064\015\127" +
    "\016\141\017\133\020\122\021\107\022\104\023\145\024" +
    "\111\025\134\026\137\027\143\032\106\040\146\055\316" +
    "\056\114\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\025" +
    "\134\026\137\027\143\032\106\040\267\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\025\262\026\137\027\143\032\106\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\025" +
    "\247\026\137\027\143\032\106\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\025\152\026" +
    "\137\027\143\032\106\041\153\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\025\152\026\137\027\143\031\156\032\106\041\157" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\025" +
    "\161\026\137\027\143\032\106\001\001\000\002\001\001" +
    "\000\012\025\241\026\137\027\143\032\106\001\001\000" +
    "\012\025\240\026\137\027\143\032\106\001\001\000\004" +
    "\030\222\001\001\000\012\025\216\026\137\027\143\032" +
    "\106\001\001\000\012\025\215\026\137\027\143\032\106" +
    "\001\001\000\002\001\001\000\012\025\212\026\137\027" +
    "\143\032\106\001\001\000\012\025\211\026\137\027\143" +
    "\032\106\001\001\000\012\025\210\026\137\027\143\032" +
    "\106\001\001\000\012\025\207\026\137\027\143\032\106" +
    "\001\001\000\012\025\206\026\137\027\143\032\106\001" +
    "\001\000\012\025\205\026\137\027\143\032\106\001\001" +
    "\000\012\025\204\026\137\027\143\032\106\001\001\000" +
    "\012\025\203\026\137\027\143\032\106\001\001\000\002" +
    "\001\001\000\012\025\202\026\137\027\143\032\106\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\025\214\026\137\027\143\032\106\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\045\237" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\045" +
    "\224\001\001\000\016\025\152\026\137\027\143\031\225" +
    "\032\106\041\157\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\025\230\026\137\027\143" +
    "\032\106\001\001\000\002\001\001\000\012\025\232\026" +
    "\137\027\143\032\106\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\025\235\026\137\027\143\032\106\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\025" +
    "\252\026\137\027\143\032\106\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\025\255\026\137\027\143\032" +
    "\106\001\001\000\002\001\001\000\012\025\257\026\137" +
    "\027\143\032\106\001\001\000\002\001\001\000\034\015" +
    "\127\016\261\017\133\020\122\021\107\022\104\023\145" +
    "\024\111\025\134\026\137\027\143\032\106\040\146\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\025\272\026\137" +
    "\027\143\032\106\001\001\000\002\001\001\000\034\015" +
    "\127\016\274\017\133\020\122\021\107\022\104\023\145" +
    "\024\111\025\134\026\137\027\143\032\106\040\146\001" +
    "\001\000\004\042\276\001\001\000\034\015\127\016\277" +
    "\017\133\020\122\021\107\022\104\023\145\024\111\025" +
    "\134\026\137\027\143\032\106\040\146\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\025\301\026\137\027" +
    "\143\032\106\001\001\000\002\001\001\000\004\006\303" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\025\134\026\137\027\143\032\106\040\307" +
    "\001\001\000\002\001\001\000\012\025\311\026\137\027" +
    "\143\032\106\001\001\000\002\001\001\000\014\025\134" +
    "\026\137\027\143\032\106\040\313\001\001\000\002\001" +
    "\001\000\034\015\127\016\315\017\133\020\122\021\107" +
    "\022\104\023\145\024\111\025\134\026\137\027\143\032" +
    "\106\040\146\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintaxis$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintaxis$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintaxis$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



/* ------------ Manejo de Errores ---------- */    

    //Mostrar Errores:
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            m.append(" de sintaxis... Simbolo: " + s.value.toString()+ " no reconocido.");
            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));
                if (s.right >= 0)
                    m.append(", column "+(s.right+1));
            }
        }
        m.append(" : "+message);
        System.err.println(m);
    }
   
    // RIP
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

    
    public static void main(String[] args){
        try {
            Sintaxis sintactico = new Sintaxis(
                    new AnalizadorFlex( new FileReader(args[0])));
            Object result = sintactico.parse().value;
            System.out.println("\n  --- Generación con CUP ---");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintaxis$actions {
  private final Sintaxis parser;

  /** Constructor */
  CUP$Sintaxis$actions(Sintaxis parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintaxis$do_action_part00000000(
    int                        CUP$Sintaxis$act_num,
    java_cup.runtime.lr_parser CUP$Sintaxis$parser,
    java.util.Stack            CUP$Sintaxis$stack,
    int                        CUP$Sintaxis$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintaxis$result;

      /* select the action based on the action number */
      switch (CUP$Sintaxis$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Start ::= Program 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Start",40, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Start EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).value;
		RESULT = start_val;
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintaxis$parser.done_parsing();
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Program ::= Program Decl 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Program ::= 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), (Symbol) RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Decl ::= VariableDecl 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Decl",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Decl ::= FunctionDecl 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Decl",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Decl ::= ClassDecl 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Decl",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Decl ::= InterfaceDecl 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Decl",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Decl ::= error PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Decl",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Decl ::= error LLAVECLOSE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Decl",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VariableDecl ::= Variable PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("VariableDecl",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Variable ::= Type IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Variable",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Type ::= INT 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Type ::= DOUBLE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Type ::= BOOL 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Type ::= CADENA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Type ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Type ::= Type CORCHETES 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FunctionDecl ::= Type FuncCont 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("FunctionDecl",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // FunctionDecl ::= VOID FuncCont 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("FunctionDecl",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // FuncCont ::= IDENTIFICADOR POPEN Formals PCLOSE StmtBlock 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("FuncCont",29, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Formals ::= FormalsB Variable 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Formals",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Formals ::= 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Formals",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), (Symbol) RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // FormalsB ::= FormalsB Variable COMA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("FormalsB",42, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // FormalsB ::= 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("FormalsB",42, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), (Symbol) RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ClassDecl ::= CLASS IDENTIFICADOR Ext Imp LLAVEOPEN ClassField LLAVECLOSE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("ClassDecl",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Ext ::= EXTENDS IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Ext",25, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Ext ::= 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Ext",25, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), (Symbol) RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Imp ::= IMPLEMENTS ImpID 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Imp",26, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Imp ::= 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Imp",26, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), (Symbol) RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ImpID ::= ImpID COMA IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("ImpID",27, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ImpID ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("ImpID",27, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ClassField ::= ClassField Field 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("ClassField",33, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ClassField ::= 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("ClassField",33, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), (Symbol) RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Field ::= VariableDecl 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Field",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Field ::= FunctionDecl 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Field",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // InterfaceDecl ::= INTERFACE IDENTIFICADOR LLAVEOPEN InterfaceProt LLAVECLOSE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("InterfaceDecl",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // InterfaceProt ::= InterfaceProt Prototype 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("InterfaceProt",34, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // InterfaceProt ::= 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("InterfaceProt",34, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), (Symbol) RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Prototype ::= Type ProtCont 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Prototype",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Prototype ::= VOID ProtCont 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Prototype",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ProtCont ::= IDENTIFICADOR POPEN Formals PCLOSE PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("ProtCont",28, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // StmtBlock ::= LLAVEOPEN StmtContent LLAVECLOSE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("StmtBlock",11, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // StmtContent ::= StmtBlockVariableDecl StmtContent 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("StmtContent",43, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // StmtContent ::= 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("StmtContent",43, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), (Symbol) RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // StmtBlockVariableDecl ::= VariableDecl 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("StmtBlockVariableDecl",44, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // StmtBlockVariableDecl ::= Stmt 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("StmtBlockVariableDecl",44, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Stmt ::= StmtExpr PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Stmt",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Stmt ::= IfStmt 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Stmt",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Stmt ::= WhileStmt 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Stmt",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Stmt ::= ForStmt 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Stmt",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Stmt ::= BreakStmt 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Stmt",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Stmt ::= ReturnStmt 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Stmt",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Stmt ::= PrintStmt 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Stmt",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Stmt ::= StmtBlock 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Stmt",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // StmtExpr ::= Expr 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("StmtExpr",30, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // StmtExpr ::= 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("StmtExpr",30, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), (Symbol) RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // IfStmt ::= IF POPEN Expr PCLOSE Stmt ElseIfStmt 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IfStmt",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ElseIfStmt ::= ELSE Stmt 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("ElseIfStmt",32, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ElseIfStmt ::= 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("ElseIfStmt",32, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), (Symbol) RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // WhileStmt ::= WHILE POPEN Expr PCLOSE Stmt 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("WhileStmt",14, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ForStmt ::= FOR POPEN StmtExpr PUNTOYCOMA Expr PUNTOYCOMA StmtExpr PCLOSE Stmt 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("ForStmt",15, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ReturnStmt ::= RETURN StmtExpr PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("ReturnStmt",16, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // BreakStmt ::= BREAK PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("BreakStmt",17, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // PrintStmt ::= PRINT POPEN ExprPrint PCLOSE PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("PrintStmt",18, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ExprPrint ::= ExprPrint COMA Expr 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("ExprPrint",31, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ExprPrint ::= Expr 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("ExprPrint",31, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Expr ::= LValue IGUAL Expr 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Expr ::= Constant 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Expr ::= LValue 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Expr ::= THIS 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Expr ::= Call 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Expr ::= POPEN Expr PCLOSE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Expr ::= Expr SUMA Expr 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Expr ::= Expr RESTA Expr 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Expr ::= Expr MULT Expr 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Expr ::= Expr DIVISION Expr 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Expr ::= Expr MOD Expr 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Expr ::= RESTA Expr 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Expr ::= Expr MENOR Expr 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Expr ::= Expr MENORIGUAL Expr 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Expr ::= Expr MAYOR Expr 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Expr ::= Expr MAYORIGUAL Expr 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Expr ::= Expr DOBLEIGUAL Expr 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Expr ::= Expr DISTINTO Expr 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Expr ::= Expr AMPERSAN AMPERSAN Expr 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Expr ::= Expr OR OR Expr 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Expr ::= EXCLACLOSE Expr 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Expr ::= NEW POPEN IDENTIFICADOR PCLOSE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Expr ::= NEWARRAY POPEN Expr COMA Type PCLOSE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Expr ::= READINTEGER PARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Expr ::= READLINE PARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Expr ::= MALLOC POPEN Expr PCLOSE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // LValue ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("LValue",20, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // LValue ::= Expr PUNTO IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("LValue",20, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // LValue ::= Expr CORCHETEOPEN Expr CORCHETECLOSE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("LValue",20, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Call ::= IDENTIFICADOR POPEN Actuals PCLOSE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Call",21, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Call ::= Expr PUNTO IDENTIFICADOR CallCont 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Call",21, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Call ::= Expr PUNTO LibCall CallCont 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Call",21, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // CallCont ::= POPEN Actuals PCLOSE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CallCont",35, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // LibCall ::= GETBYTE POPEN Expr PCLOSE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("LibCall",22, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // LibCall ::= SETBYTE POPEN Expr COMA Expr PCLOSE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("LibCall",22, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Actuals ::= ExprPrint 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Actuals",23, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Actuals ::= 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Actuals",23, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), (Symbol) RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Constant ::= intConstant 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Constant",24, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Constant ::= doubleConstant 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Constant",24, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Constant ::= boolConstant 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Constant",24, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Constant ::= CADENA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Constant",24, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Constant ::= NULL 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Constant",24, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintaxis$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintaxis$do_action(
    int                        CUP$Sintaxis$act_num,
    java_cup.runtime.lr_parser CUP$Sintaxis$parser,
    java.util.Stack            CUP$Sintaxis$stack,
    int                        CUP$Sintaxis$top)
    throws java.lang.Exception
    {
              return CUP$Sintaxis$do_action_part00000000(
                               CUP$Sintaxis$act_num,
                               CUP$Sintaxis$parser,
                               CUP$Sintaxis$stack,
                               CUP$Sintaxis$top);
    }
}

}
