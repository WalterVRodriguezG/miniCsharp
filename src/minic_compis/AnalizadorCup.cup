package minic_compis;
import java_cup.runtime.*;
import java.io.FileReader;

parser code {:
/* ------------ Manejo de Errores ---------- */    

    //Mostrar Errores:
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            m.append(" de sintaxis... Simbolo: " + s.value.toString()+ " no reconocido.");
            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));
                if (s.right >= 0)
                    m.append(", column "+(s.right+1));
            }
        }
        m.append(" : "+message);
        System.err.println(m);
    }
   
    // RIP
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

    
    public static void main(String[] args){
        try {
            Sintaxis sintactico = new Sintaxis(
                    new AnalizadorFlex( new FileReader(args[0])));
            Object result = sintactico.parse().value;
            System.out.println("\n  --- Generación con CUP ---");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
:};

    /* ------------Declaracion de simbolos terminales y no terminales---------- */

            /*--------------TERMINALES-----------*/
terminal VOID, INT, DOUBLE, BOOL, STRING, CLASS, INTERFACE, NULL, THIS, EXTENDS, IMPLEMENTS, FOR, WHILE, IF, ELSE, RETURN, BREAK, NEW, NEWARRAY, PRINT, READINTEGER, READLINE, MALLOC,  GETBYTE, SETBYTE, IDENTIFICADOR, SUMA, RESTA, MULT, DIVISION, MOD, IGUAL, MENOR, MAYOR, OR, MAYORIGUAL, MENORIGUAL, DOBLEIGUAL, DISTINTO, CORCHETES, LLAVES, PARENTESIS, EXCLAOPEN, EXCLACLOSE, ARROBA, SHARP, DOLLAR, AMPERSAN, POPEN, PCLOSE, QUESTIONOPEN, QUESTIONCLOSE, CORCHETEOPEN, CORCHETECLOSE, LLAVEOPEN, LLAVECLOSE, COMA, PUNTOYCOMA, PUNTO, DOSPUNTOS, GUIONBAJO;
terminal Object intConstant, doubleConstant, boolConstant, CADENA, hexConstant;

            /*--------------NO TERMINALES-----------*/
non terminal  Program, Decl, VariableDecl, Variable, Type, FunctionDecl, Formals, ClassDecl, Field, InterfaceDecl, Prototype, StmtBlock, Stmt, IfStmt, WhileStmt, ForStmt, ReturnStmt, BreakStmt, PrintStmt, Expr, LValue, Call, LibCall, Actuals, Constant, Ext, Imp, ImpID, ProtCont, FuncCont, StmtExpr, ExprPrint, ElseIfStmt, ClassField, InterfaceProt, CallCont,FormalsCont, StmtEnd, StmtCont, StmtVar, Start, StmtStmt, FormalsB, StmtContent, StmtBlockVariableDecl;

            /*--------------PRECEDENCIAS-----------*/
precedence left SUMA, RESTA, MULT, DIVISION, MOD;
//precedence left Expr;
precedence left IGUAL, MENOR, MAYOR, OR, MAYORIGUAL, MENORIGUAL, DOBLEIGUAL, DISTINTO, EXCLACLOSE, AMPERSAN, CORCHETEOPEN, PUNTO ;
precedence left ELSE;
precedence left IDENTIFICADOR;
precedence left CADENA;



            /* -------------------GRAMATICA MINI C#------------------------ */

Start ::= Program ;

Program ::= Program Decl
|  /* ε */ ;

Decl ::= VariableDecl
| FunctionDecl
| ClassDecl
| InterfaceDecl 
| error PUNTOYCOMA
| error LLAVECLOSE;

VariableDecl ::= Variable PUNTOYCOMA ;

Variable ::= Type IDENTIFICADOR ;

Type ::= INT
| DOUBLE
| BOOL
| CADENA
| IDENTIFICADOR
| Type CORCHETES ;

FunctionDecl ::= Type FuncCont
| VOID FuncCont ;

FuncCont ::= IDENTIFICADOR POPEN Formals PCLOSE StmtBlock;

Formals ::= FormalsB Variable
|  /* ε */ ;

FormalsB ::= FormalsB Variable COMA 
| /* ε */ ;

ClassDecl ::= CLASS IDENTIFICADOR Ext Imp LLAVEOPEN ClassField LLAVECLOSE ;

Ext ::= EXTENDS IDENTIFICADOR
| /* ε */ ;

Imp ::= IMPLEMENTS ImpID
| /* ε */ ;

ImpID ::= ImpID COMA IDENTIFICADOR
| IDENTIFICADOR ;

ClassField ::= ClassField Field
| /* ε */ ;

Field ::= VariableDecl
|  FunctionDecl ;

InterfaceDecl ::= INTERFACE IDENTIFICADOR LLAVEOPEN InterfaceProt LLAVECLOSE ;

InterfaceProt ::= InterfaceProt Prototype
| /* ε */ ;

Prototype ::= Type ProtCont
| VOID ProtCont;

ProtCont ::= IDENTIFICADOR POPEN Formals PCLOSE PUNTOYCOMA ;

StmtBlock ::= LLAVEOPEN StmtContent LLAVECLOSE ;

StmtContent ::= StmtBlockVariableDecl StmtContent
| /* ε */ ;

StmtBlockVariableDecl ::= VariableDecl 
| Stmt ;

Stmt ::= StmtExpr PUNTOYCOMA
| IfStmt
| WhileStmt
| ForStmt
| BreakStmt
| ReturnStmt
| PrintStmt
| StmtBlock ;

StmtExpr ::= Expr
| /* ε */ ;

IfStmt ::= IF POPEN Expr PCLOSE Stmt ElseIfStmt ;

ElseIfStmt ::= ELSE Stmt
| /* ε */ ;

WhileStmt ::= WHILE POPEN Expr PCLOSE Stmt ;

ForStmt ::= FOR POPEN StmtExpr PUNTOYCOMA Expr PUNTOYCOMA StmtExpr PCLOSE Stmt ;

ReturnStmt ::= RETURN StmtExpr PUNTOYCOMA ;

BreakStmt ::= BREAK PUNTOYCOMA ;

PrintStmt ::= PRINT POPEN ExprPrint PCLOSE PUNTOYCOMA ;

ExprPrint ::= ExprPrint COMA Expr
| Expr ;

Expr ::= LValue IGUAL Expr
| Constant
| LValue
| THIS
| Call 
| POPEN Expr PCLOSE
| Expr SUMA Expr
| Expr RESTA Expr
| Expr MULT Expr
| Expr DIVISION Expr
| Expr MOD Expr
| RESTA Expr
| Expr MENOR Expr
| Expr MENORIGUAL Expr
| Expr MAYOR Expr
| Expr MAYORIGUAL Expr
| Expr DOBLEIGUAL Expr
| Expr DISTINTO Expr
| Expr AMPERSAN AMPERSAN Expr
| Expr OR OR Expr
| EXCLACLOSE Expr
| NEW POPEN IDENTIFICADOR PCLOSE
| NEWARRAY POPEN Expr COMA Type PCLOSE
| READINTEGER PARENTESIS
| READLINE PARENTESIS
| MALLOC POPEN Expr PCLOSE ;

LValue ::= IDENTIFICADOR
| Expr PUNTO IDENTIFICADOR
| Expr CORCHETEOPEN Expr CORCHETECLOSE ;

Call ::= IDENTIFICADOR POPEN Actuals PCLOSE 
| Expr PUNTO IDENTIFICADOR CallCont
| Expr PUNTO LibCall CallCont ;

CallCont ::= POPEN Actuals PCLOSE ;

LibCall ::= GETBYTE POPEN Expr PCLOSE
| SETBYTE POPEN Expr COMA Expr PCLOSE ;

Actuals ::= ExprPrint
| /* ε */ ;

Constant ::= intConstant
| doubleConstant
| boolConstant
| CADENA
| NULL ;
