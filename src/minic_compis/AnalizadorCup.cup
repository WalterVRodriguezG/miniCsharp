package minic_compis;
import java_cup.runtime.*;
import java.io.FileReader;

parser code {:
/* ------------ Manejo de Errores ---------- */    

    /* Mostrar Errores: */
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            m.append(" de sintaxis... Simbolo: " + s.value.toString()+ " no reconocido.");
            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));
                if (s.right >= 0)
                    m.append(", column "+(s.right+1));
            }
        }
        /* m.append(" : "+message); */
        System.err.println(m);
    }
   
    /* RIP */
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

    
    public static void main(String[] args){
        try {
            Sintaxis sintactico = new Sintaxis(
                    new AnalizadorFlex( new FileReader(args[0])));
            Object result = sintactico.parse().value;
            System.out.println("\n  --- Generación con CUP ---");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
:};

    /* ------------Declaracion de simbolos terminales y no terminales---------- */

/* ------------Declaracion de simbolos terminales y no terminales---------- *

/*--------------TERMINALES-----------*/
terminal VOID, INT, DOUBLE, BOOL, STRING, CLASS, INTERFACE, NULL, THIS, EXTENDS, IMPLEMENTS, FOR, WHILE, IF, ELSE, RETURN, BREAK, NEW, NEWARRAY, PRINT, READINTEGER, READLINE, MALLOC, IDENT, GETBYTE, SETBYTE, PLUS, MINUS, TIMES, DIV, MOD, LESS, LESSEQ, GREATER, GREATEREQ, EQUALS, EQTO, NOTEQ, AMPERSONS, OR, EXCLAM, SEMI, COMMA, PERIOD, LCOR, RCOR, LPAR, RPAR, LLLAV, RLLAV, CORS, PARS, LLAVS, CONSTANT;
terminal Object intConstant, doubleConstant, boolConstant, stringConstant, hexConstant;

/*--------------NO TERMINALES-----------*/
non terminal  Program, Decl, VariableDecl, Variable, Type, FunctionDecl, Formals, ClassDecl, Field, InterfaceDecl, Prototype, StmtBlock, Stmt, IfStmt, WhileStmt, ForStmt, ReturnStmt, BreakStmt, PrintStmt, Expr,Expr1, LValue, Call, LibCall, Actuals, Constant, Ext, Imp, ImpID, ProtCont, FuncCont, StmtExpr, ExprPrint, ElseIfStmt, ClassField, InterfaceProt, CallCont,FormalsCont, StmtEnd, StmtCont;

/*--------------PRECEDENCIAS-----------*/
precedence left EQUALS;
precedence left PLUS, MINUS, TIMES, DIV, MOD;
precedence left LESS, LESSEQ, GREATER, GREATEREQ, EQTO, NOTEQ, AMPERSONS, OR, EXCLAM ;
precedence left ELSE;
precedence left IDENT;
precedence left DOUBLE,BOOL,STRING,INT,VOID;
/* -------------------GRAMATICA FORMAL------------------------ */

Program ::= Program Decl
|
;

Decl ::= VariableDecl
| FunctionDecl
| ClassDecl
| InterfaceDecl
| error SEMI
| error RLLAV ;

VariableDecl ::=  Variable SEMI 
| CONSTANT Variable SEMI ;

Variable ::=   Type:t IDENT:I {: RESULT = ""; RESULT=RESULT.toString().concat("["+I+","+t+"]");if (!Manejador.put(I,"v",t))  System.out.println("  La variable " + I + " ya ha sido declarada en el ambito actual"); :} ;

Type ::= INT {: RESULT = "integer"; :}
| DOUBLE {: RESULT = "double"; :}
| BOOL {: RESULT = "bool"; :}
| STRING {: RESULT = "string"; :}
| IDENT:n1 {: RESULT = n1.toString(); :}
| VOID
| Type CORS ;

FunctionDecl ::= FuncCont:n;

FuncCont ::= Type:t IDENT:n {: if(!Manejador.put(n.toString(),"m",t)) {System.out.println("Nombre de metodo ya existe");} else {System.out.print(" METHOD ENTRY: "+n); Manejador.push();}:} LPAR Formals:p {:Manejador.parametros(n.toString(),p);:} RPAR StmtBlock:v {:Manejador.mreturn(t.toString(),v);System.out.print(" BLOCK EXIT"); Manejador.pop();System.out.print(" METHOD EXIT " +n); Manejador.pop();:} ;

Formals ::= FormalsCont:a Variable:b {: if(a==null){a="";a = a.toString().concat(b.toString());}else{a = a.toString().concat(b.toString());} RESULT = a; :}
| /*  */
;

FormalsCont ::= FormalsCont:a Variable:b COMMA {:if(a==null){a="";}; a = a.toString().concat(b+"-"); RESULT = a;:}
| /*  */
;

ClassDecl ::= CLASS IDENT:n1 Ext:n2   
{:
    if(n2 == null)
    {
        if(Manejador.putClass(n1.toString(),null,null) != 0)
        {
            System.out.println("  La clase " + n1 + " ya ha sido declarada en el ambito actual");
        }
    }
    else
    {
        switch(Manejador.putClass(n1.toString(),n2.toString(),null))
        {
            case 1:
            System.out.println("  La clase " + n1 + " ya ha sido declarada en el ambito actual");
            break;

            case 2:
            System.out.println("  La clase " + n2 + " no existe en el ambito actual");
            break;                
        } 
    }
:} 
Imp LLLAV ClassField RLLAV 
{:
      System.out.print("  Saliendo de la clase: "+n1);
      Manejador.pop();
 :} ;

Ext ::= EXTENDS IDENT:n1 {: RESULT = n1; :}
| /* ε */ ;

Imp ::= IMPLEMENTS ImpID:e 
{:
    Manejador.getInterfaces(e.toString());
:}
| /* ε */ ;

ImpID ::= ImpID:e1 COMMA IDENT: e2 {: RESULT = e1 + "," + e2; :}
| IDENT:n3 {: RESULT = n3; :} ;

ClassField ::= ClassField Field
| /* ε */ ;

Field ::= VariableDecl
| FunctionDecl ;

InterfaceDecl ::= INTERFACE IDENT:n1 {: if(Manejador.putClass(n1.toString(),null,null) != 0) System.out.println("  La interfaz " + n1 + " ya ha sido declarada en el ambito actual"); :} LLLAV InterfaceProt RLLAV ;

InterfaceProt ::= InterfaceProt Prototype
| /* ε */ ;

Prototype ::= Type ProtCont
| VOID ProtCont;

ProtCont ::= IDENT LPAR Formals RPAR SEMI ;

StmtBlock ::= LLLAV {:System.out.print(" BLOCK ENTRY"); Manejador.push(); :} StmtCont:p {:RESULT=p;:} RLLAV ;

StmtCont ::= StmtEnd:p StmtCont:q{:if(p!=null){if(q==null){q="";q = q.toString().concat(p.toString());}else {q = q.toString().concat(p.toString());}}; RESULT = q; :}
| /* ε */ ;

StmtEnd ::= VariableDecl
| Stmt:p {:RESULT = p;:} ;

Stmt ::= StmtExpr:m{:RESULT=m;:} SEMI
| IfStmt
| WhileStmt
| ForStmt
| BreakStmt
| ReturnStmt:p {:RESULT = p;:}
| PrintStmt
| StmtBlock ;

StmtExpr ::= Expr:n {:RESULT=n;:}
| /* ε */ ;

IfStmt ::= IF LPAR Expr RPAR Stmt ElseIfStmt ;

ElseIfStmt ::= ELSE Stmt
| /* ε */ ;

WhileStmt ::= WHILE LPAR Expr RPAR Stmt ;

ForStmt ::= FOR LPAR StmtExpr SEMI Expr SEMI StmtExpr RPAR Stmt ;

ReturnStmt ::= RETURN StmtExpr:p {:RESULT = p;:} SEMI ;

BreakStmt ::= BREAK SEMI ;

PrintStmt ::= PRINT LPAR ExprPrint RPAR SEMI ;

ExprPrint ::= ExprPrint:a COMMA Expr:b {:a = a.toString().concat(","+b.toString()); RESULT = a;:}
| Expr:n {:RESULT=n.toString();:} ;

Expr ::= LValue:v EQUALS Expr:e 
{: 
    Manejador.Validar(v.toString(), e.toString());
:} 
| Constant:e {: RESULT = e; :}
| LValue:e {: RESULT = e; :}
| THIS
| Call 
| LPAR Expr:p RPAR {:RESULT = p;:}
| Expr1:e1 PLUS Expr:e2 {: RESULT = e1 + "+" + e2; :}
| Expr1:e1 MINUS Expr:e2 {: RESULT = e1 + "-" + e2; :}
| Expr1:e1 TIMES Expr:e2 {: RESULT = e1 + "*" + e2; :}
| Expr1:e1 DIV Expr:e2 {: RESULT = e1 + "/" + e2; :}
| Expr MOD Expr
| MINUS Expr
| Expr LESS Expr
| Expr LESSEQ Expr
| Expr GREATER Expr
| Expr GREATEREQ Expr
| Expr EQTO Expr
| Expr NOTEQ Expr
| Expr AMPERSONS Expr
| Expr OR Expr
| EXCLAM Expr
| NEW LPAR IDENT RPAR
| NEWARRAY LPAR Expr COMMA Type RPAR
| READINTEGER LPAR RPAR
| READLINE LPAR RPAR
| MALLOC LPAR Expr RPAR ;

Expr1 ::= Constant:e {: RESULT = e; :}
| IDENT:e {: RESULT = e; :} ;

LValue ::= IDENT:e {: RESULT = e; :}
| Expr PERIOD IDENT
| Expr LCOR Expr RCOR ;

Call ::= IDENT:n {:if(!Manejador.get_name(n.toString(), "m")){ System.out.println("***WARNING*** ==> Método: " + n + " no ha sido declarado");}:} LPAR Actuals:n1 {:Manejador.tipos(n.toString(),n1.toString());:} RPAR 
| Expr PERIOD IDENT CallCont
| Expr PERIOD LibCall CallCont ;

CallCont ::= LPAR Actuals RPAR ;

LibCall ::= GETBYTE LPAR Expr RPAR 
| SETBYTE LPAR Expr COMMA Expr RPAR ;

Actuals ::= ExprPrint:n {:System.out.println(n); RESULT=n;:}
| /* ε */ ;

Constant ::= intConstant:e {: RESULT = e + "&int"; :}
| doubleConstant:e {: RESULT = e + "&dob"; :}
| boolConstant:e {: RESULT = e + "&bool"; :}
| stringConstant:e {: RESULT = e + "&str"; :}
| NULL {:RESULT = "&null"; :}  ;