package minic_compis;
import java_cup.runtime.*;
import java.io.FileReader;

parser code {:
/* ------------ Manejo de Errores ---------- */    

    /* Mostrar Errores: */
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            m.append(" de sintaxis... Simbolo: " + s.value.toString()+ " no reconocido.");
            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));
                if (s.right >= 0)
                    m.append(", column "+(s.right+1));
            }
        }
        /* m.append(" : "+message); */
        System.err.println(m);
    }
   
    /* RIP */
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

    
    public static void main(String[] args){
        try {
            Sintaxis sintactico = new Sintaxis(
                    new AnalizadorFlex( new FileReader(args[0])));
            Object result = sintactico.parse().value;
            System.out.println("\n  --- Generación con CUP ---");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
:};

    /* ------------Declaracion de simbolos terminales y no terminales---------- */

/* ------------Declaracion de simbolos terminales y no terminales---------- *

/*--------------TERMINALES-----------*/
terminal VOID, INT, DOUBLE, BOOL, STRING, CLASS, INTERFACE, NULL, THIS, EXTENDS, IMPLEMENTS, FOR, WHILE, IF, ELSE, RETURN, BREAK, NEW, NEWARRAY, PRINT, READINTEGER, READLINE, MALLOC, IDENTIFICADOR, GETBYTE, SETBYTE, SUMA, RESTA, MULTI, DIV, MOD, MENOR, MENORIGUAL, MAYOR, MAYORIGUAL, IGUAL, IGUALCOMPARACION, DISTINTO, AMPERSONS, OR, EXCLAM, PUNTOYCOMA, COMA, PERIOD, CORABIERTO, CORCERRADO, PARABIERTO, PARCERRADO, LLAVABIERTA, LLAVCERRADA, CORCHETES, PARENTESIS, LLAVES, CONSTANT, PUNTO;
terminal Object intConstant, doubleConstant, boolConstant, stringConstant, hexConstant;

/*--------------NO TERMINALES-----------*/
non terminal  Program, Decl, VariableDecl, Variable, Type, FunctionDecl, Formals, ClassDecl, Field, InterfaceDecl, Prototype, StmtBlock, Stmt, IfStmt, WhileStmt, ForStmt, ReturnStmt, BreakStmt, PrintStmt, Expr,Expr1, LValue, Call, LibCall, Actuals, Constant, Ext, Imp, ImpID, ProtCont, FuncCont, StmtExpr, ExprPrint, ElseIfStmt, ClassField, InterfaceProt, CallCont,FormalsCont, StmtEnd, StmtCont;

/*--------------PRECEDENCIAS-----------*/
precedence left IGUAL;
precedence left SUMA, RESTA, MULTI, DIV, MOD;
precedence left MENOR, MENORIGUAL, MAYOR, MAYORIGUAL, IGUAL, DISTINTO, AMPERSONS, OR, EXCLAM ;
precedence left ELSE;
precedence left IDENTIFICADOR;
precedence left DOUBLE,BOOL,STRING,INT,VOID;
/* -------------------GRAMATICA FORMAL------------------------ */

Program ::= Program Decl
|
;

Decl ::= VariableDecl
| FunctionDecl
| ClassDecl
| InterfaceDecl
| error PUNTOYCOMA
| error LLAVCERRADA ;

VariableDecl ::=  Variable PUNTOYCOMA
| CONSTANT Variable PUNTOYCOMA ;

Variable ::=   Type:t IDENTIFICADOR:I {: RESULT = ""; RESULT=RESULT.toString().concat("["+I+","+t+"]");if (!Manejador.put(I,"v",t))  System.out.println("  La variable " + I + " ya ha sido declarada en el ambito actual"); :} ;

Type ::= INT {: RESULT = "integer"; :}
| DOUBLE {: RESULT = "double"; :}
| BOOL {: RESULT = "bool"; :}
| STRING {: RESULT = "string"; :}
| IDENTIFICADOR:n1 {: RESULT = n1.toString(); :}
| VOID
| Type CORCHETES ;

FunctionDecl ::= FuncCont:n;

FuncCont ::= Type:t IDENTIFICADOR:n {: if(!Manejador.put(n.toString(),"m",t)) {System.out.println("Nombre de metodo ya existe");} else {System.out.print(" Ingreso de Metodo: "+n); Manejador.push();}:} PARABIERTO Formals:p {:Manejador.parametros(n.toString(),p);:} PARCERRADO StmtBlock:v {:Manejador.mreturn(t.toString(),v);System.out.print(" Salida de Block"); Manejador.pop();System.out.print(" Salida del Metodo " +n); Manejador.pop();:} ;

Formals ::= FormalsCont:a Variable:b {: if(a==null){a="";a = a.toString().concat(b.toString());}else{a = a.toString().concat(b.toString());} RESULT = a; :}
| /*  */
;

FormalsCont ::= FormalsCont:a Variable:b COMA {:if(a==null){a="";}; a = a.toString().concat(b+"-"); RESULT = a;:}
| /*  */
;

ClassDecl ::= CLASS IDENTIFICADOR:n1 Ext:n2   
{:
    if(n2 == null)
    {
        if(Manejador.putClass(n1.toString(),null,null) != 0)
        {
            System.out.println("  La clase " + n1 + " ya ha sido declarada en el ambito actual");
        }
    }
    else
    {
        switch(Manejador.putClass(n1.toString(),n2.toString(),null))
        {
            case 1:
            System.out.println("  La clase " + n1 + " ya ha sido declarada en el ambito actual");
            break;

            case 2:
            System.out.println("  La clase " + n2 + " no existe en el ambito actual");
            break;                
        } 
    }
:} 
Imp LLAVABIERTA ClassField LLAVCERRADA 
{:
      System.out.print("  Saliendo de la clase: "+n1);
      Manejador.pop();
 :} ;

Ext ::= EXTENDS IDENTIFICADOR:n1 {: RESULT = n1; :}
| /* ε */ ;

Imp ::= IMPLEMENTS ImpID:e 
{:
    Manejador.getInterfaces(e.toString());
:}
| /* ε */ ;

ImpID ::= ImpID:e1 COMA IDENTIFICADOR: e2 {: RESULT = e1 + "," + e2; :}
| IDENTIFICADOR:n3 {: RESULT = n3; :} ;

ClassField ::= ClassField Field
| /* ε */ ;

Field ::= VariableDecl
| FunctionDecl ;

InterfaceDecl ::= INTERFACE IDENTIFICADOR:n1 {: if(Manejador.putClass(n1.toString(),null,null) != 0) System.out.println("  La interfaz " + n1 + " ya declarada en el ambito actual"); :} LLAVABIERTA InterfaceProt LLAVCERRADA ;

InterfaceProt ::= InterfaceProt Prototype
| /* ε */ ;

Prototype ::= Type ProtCont
| VOID ProtCont;

ProtCont ::= IDENTIFICADOR PARABIERTO Formals PARCERRADO PUNTOYCOMA ;

StmtBlock ::= LLAVABIERTA {:System.out.print(" BLOCK ENTRY"); Manejador.push(); :} StmtCont:p {:RESULT=p;:} LLAVCERRADA ;

StmtCont ::= StmtEnd:p StmtCont:q{:if(p!=null){if(q==null){q="";q = q.toString().concat(p.toString());}else {q = q.toString().concat(p.toString());}}; RESULT = q; :}
| /* ε */ ;

StmtEnd ::= VariableDecl
| Stmt:p {:RESULT = p;:} ;

Stmt ::= StmtExpr:m{:RESULT=m;:} PUNTOYCOMA
| IfStmt
| WhileStmt
| ForStmt
| BreakStmt
| ReturnStmt:p {:RESULT = p;:}
| PrintStmt
| StmtBlock ;

StmtExpr ::= Expr:n {:RESULT=n;:}
| /* ε */ ;

IfStmt ::= IF PARABIERTO Expr PARCERRADO Stmt ElseIfStmt ;

ElseIfStmt ::= ELSE Stmt
| /* ε */ ;

WhileStmt ::= WHILE PARABIERTO Expr PARCERRADO Stmt ;

ForStmt ::= FOR PARABIERTO StmtExpr PUNTOYCOMA Expr PUNTOYCOMA StmtExpr PARCERRADO Stmt ;

ReturnStmt ::= RETURN StmtExpr:p {:RESULT = p;:} PUNTOYCOMA ;

BreakStmt ::= BREAK PUNTOYCOMA ;

PrintStmt ::= PRINT PARABIERTO ExprPrint PARCERRADO PUNTOYCOMA ;

ExprPrint ::= ExprPrint:a COMA Expr:b {:a = a.toString().concat(","+b.toString()); RESULT = a;:}
| Expr:n {:RESULT=n.toString();:} ;

Expr ::= LValue:v IGUAL Expr:e 
{: 
    Manejador.Validar(v.toString(), e.toString());
:} 
| Constant:e {: RESULT = e; :}
| LValue:e {: RESULT = e; :}
| THIS
| Call 
| PARABIERTO Expr:p PARCERRADO {:RESULT = p;:}
| Expr1:e1 SUMA Expr:e2 {: RESULT = e1 + "+" + e2; :}
| Expr1:e1 RESTA Expr:e2 {: RESULT = e1 + "-" + e2; :}
| Expr1:e1 MULTI Expr:e2 {: RESULT = e1 + "*" + e2; :}
| Expr1:e1 DIV Expr:e2 {: RESULT = e1 + "/" + e2; :}
| Expr MOD Expr
| RESTA Expr
| Expr MENOR Expr
| Expr MENORIGUAL Expr
| Expr MAYOR Expr
| Expr MAYORIGUAL Expr
| Expr IGUAL Expr
| Expr DISTINTO Expr
| Expr AMPERSONS Expr
| Expr OR Expr
| EXCLAM Expr
| NEW PARABIERTO IDENTIFICADOR PARCERRADO
| NEWARRAY PARABIERTO Expr COMA Type PARCERRADO
| READINTEGER PARABIERTO PARCERRADO
| READLINE PARENTESIS
| MALLOC PARABIERTO Expr PARCERRADO ;

Expr1 ::= Constant:e {: RESULT = e; :}
| IDENTIFICADOR:e {: RESULT = e; :} ;

LValue ::= IDENTIFICADOR:e {: RESULT = e; :}
| Expr PERIOD IDENTIFICADOR
| Expr CORABIERTO Expr CORCERRADO ;

Call ::= IDENTIFICADOR:n {:if(!Manejador.get_name(n.toString(), "m")){ System.out.println(" advertencia ==> Método: " + n + " no ha sido declarado");}:} PARABIERTO Actuals:n1 {:Manejador.tipos(n.toString(),n1.toString());:} PARCERRADO 
| Expr PERIOD IDENTIFICADOR CallCont
| Expr PERIOD LibCall CallCont ;

CallCont ::= PARABIERTO Actuals PARCERRADO ;

LibCall ::= GETBYTE PARABIERTO Expr PARCERRADO 
| SETBYTE PARABIERTO Expr COMA Expr PARCERRADO ;

Actuals ::= ExprPrint:n {:System.out.println(n); RESULT=n;:}
| /* ε */ ;

Constant ::= intConstant:e {: RESULT = e + "&int"; :}
| doubleConstant:e {: RESULT = e + "&dob"; :}
| boolConstant:e {: RESULT = e + "&bool"; :}
| stringConstant:e {: RESULT = e + "&str"; :}
| NULL {:RESULT = "&null"; :}  ;