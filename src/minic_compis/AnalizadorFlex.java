/* The following code was generated by JFlex 1.6.1 */

package minic_compis;
import static minic_compis.Token.*;
import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/Lenovo/Documents/NetBeansProjects/miniCsharp/src/minic_compis/AnalizadorFlex.flex</tt>
 */
class AnalizadorFlex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\100\1\100\1\111\1\100\1\100\22\0\1\35\1\4\1\107"+
    "\1\6\1\7\1\10\1\11\1\0\1\12\1\13\1\20\1\17\1\25"+
    "\1\32\1\27\1\36\1\105\1\2\1\77\5\2\1\110\1\2\1\30"+
    "\1\26\1\33\1\14\1\34\1\16\1\5\1\51\1\74\1\56\1\63"+
    "\1\40\1\74\1\1\1\1\1\66\2\1\1\72\1\71\1\104\1\1"+
    "\1\64\1\1\1\75\1\60\4\1\1\106\2\1\1\21\1\0\1\22"+
    "\1\0\1\31\1\0\1\44\1\52\1\42\1\57\1\53\1\101\1\67"+
    "\1\61\1\46\1\1\1\103\1\43\1\45\1\50\1\47\1\62\1\1"+
    "\1\54\1\65\1\55\1\70\1\73\1\102\1\41\1\76\1\1\1\23"+
    "\1\37\1\24\7\0\1\111\33\0\1\3\35\0\1\15\21\0\1\1"+
    "\37\0\1\1\u1f36\0\1\111\1\111\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\1\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\23\2\1\40\3\2\1\3\1\1\1\0\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\0"+
    "\1\51\4\2\1\52\32\2\2\0\1\53\1\54\2\0"+
    "\3\2\1\52\31\2\1\52\1\55\2\0\6\2\1\56"+
    "\1\42\14\2\1\57\10\2\1\42\1\2\1\42\1\2"+
    "\1\42\65\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[226];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\112\0\224\0\336\0\112\0\u0128\0\112\0\112"+
    "\0\112\0\112\0\u0172\0\u01bc\0\112\0\u0206\0\112\0\112"+
    "\0\112\0\112\0\u0250\0\112\0\u029a\0\112\0\112\0\112"+
    "\0\112\0\112\0\112\0\112\0\u02e4\0\u032e\0\u0378\0\u03c2"+
    "\0\u040c\0\u0456\0\u04a0\0\u04ea\0\u0534\0\u057e\0\u05c8\0\u0612"+
    "\0\u065c\0\u06a6\0\u06f0\0\u073a\0\u0784\0\u07ce\0\u0818\0\u0862"+
    "\0\u08ac\0\u08f6\0\u0940\0\u098a\0\u0378\0\u09d4\0\u0a1e\0\u0a68"+
    "\0\u0ab2\0\u0afc\0\u0b46\0\112\0\112\0\112\0\112\0\112"+
    "\0\112\0\112\0\112\0\u0b90\0\u0bda\0\u0c24\0\u0c6e\0\u0cb8"+
    "\0\u0d02\0\224\0\u0d4c\0\u0d96\0\u0de0\0\u0e2a\0\u0e74\0\u0ebe"+
    "\0\u0f08\0\u0f52\0\u0f9c\0\u0fe6\0\u1030\0\u107a\0\u10c4\0\u110e"+
    "\0\u1158\0\u11a2\0\u11ec\0\u1236\0\u1280\0\u12ca\0\u1314\0\u135e"+
    "\0\u13a8\0\u13f2\0\u143c\0\u1486\0\u14d0\0\u0afc\0\112\0\u151a"+
    "\0\u1564\0\u15ae\0\u15f8\0\u1642\0\u168c\0\u16d6\0\u1720\0\u176a"+
    "\0\u17b4\0\u17fe\0\u1848\0\u1892\0\u18dc\0\u1926\0\u1970\0\u19ba"+
    "\0\u1a04\0\u1a4e\0\u1a98\0\u1ae2\0\u1b2c\0\u1b76\0\u1bc0\0\u1c0a"+
    "\0\u1c54\0\u1c9e\0\u1ce8\0\u1d32\0\u1d7c\0\u1dc6\0\u1e10\0\u1e5a"+
    "\0\u14d0\0\u151a\0\u1ea4\0\u1eee\0\u1f38\0\u1f82\0\u1fcc\0\u2016"+
    "\0\u2060\0\224\0\224\0\u20aa\0\u20f4\0\u213e\0\u2188\0\u21d2"+
    "\0\u221c\0\u2266\0\u22b0\0\u22fa\0\u2344\0\u238e\0\u23d8\0\112"+
    "\0\u2422\0\u246c\0\u24b6\0\u2500\0\u254a\0\u2594\0\u25de\0\u2628"+
    "\0\u2672\0\u26bc\0\u2706\0\u2750\0\u279a\0\u27e4\0\u282e\0\u2878"+
    "\0\u28c2\0\u290c\0\u2956\0\u29a0\0\u29ea\0\u2a34\0\u2a7e\0\u2ac8"+
    "\0\u2b12\0\u2b5c\0\u2ba6\0\u2bf0\0\u2c3a\0\u2c84\0\u2cce\0\u2d18"+
    "\0\u2d62\0\u2dac\0\u2df6\0\u2e40\0\u2e8a\0\u2ed4\0\u2f1e\0\u2f68"+
    "\0\u2fb2\0\u2ffc\0\u3046\0\u3090\0\u30da\0\u3124\0\u316e\0\u31b8"+
    "\0\u3202\0\u324c\0\u3296\0\u32e0\0\u332a\0\u3374\0\u33be\0\u3408"+
    "\0\u3452\0\u349c\0\u34e6\0\u3530\0\u357a\0\u35c4\0\u360e\0\u3658"+
    "\0\u36a2\0\u36ec";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[226];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\3\1\43\3\3\1\44\1\3\1\45\1\3"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\2\3"+
    "\1\55\1\56\1\57\1\60\2\3\1\61\1\62\1\63"+
    "\1\3\1\64\1\3\1\4\1\65\1\66\1\67\1\3"+
    "\1\70\1\71\1\3\1\72\1\4\114\0\2\3\35\0"+
    "\40\3\1\0\6\3\1\0\1\3\3\0\1\4\24\0"+
    "\1\73\47\0\1\4\5\0\1\4\2\0\1\4\15\0"+
    "\1\74\106\0\1\75\113\0\1\76\112\0\1\77\117\0"+
    "\1\100\113\0\1\101\101\0\1\102\111\0\1\103\132\0"+
    "\1\65\42\0\1\65\31\0\1\104\15\0\1\105\112\0"+
    "\1\75\53\0\2\3\35\0\1\3\1\106\36\3\1\0"+
    "\6\3\1\0\1\3\2\0\2\3\35\0\3\3\1\107"+
    "\34\3\1\0\6\3\1\0\1\3\2\0\2\3\35\0"+
    "\5\3\1\110\2\3\1\111\27\3\1\0\1\112\5\3"+
    "\1\0\1\3\2\0\2\3\35\0\30\3\1\113\7\3"+
    "\1\0\6\3\1\0\1\3\2\0\2\3\35\0\7\3"+
    "\1\114\4\3\1\115\23\3\1\0\6\3\1\0\1\3"+
    "\2\0\2\3\35\0\1\3\1\116\1\3\1\117\34\3"+
    "\1\0\6\3\1\0\1\3\2\0\2\3\35\0\13\3"+
    "\1\120\24\3\1\0\6\3\1\0\1\3\2\0\2\3"+
    "\35\0\14\3\1\121\4\3\1\122\16\3\1\0\6\3"+
    "\1\0\1\3\2\0\2\3\35\0\7\3\1\123\30\3"+
    "\1\0\6\3\1\0\1\3\2\0\2\3\35\0\7\3"+
    "\1\124\30\3\1\0\6\3\1\0\1\3\2\0\2\3"+
    "\35\0\30\3\1\123\7\3\1\0\6\3\1\0\1\3"+
    "\2\0\2\3\35\0\6\3\1\125\31\3\1\0\6\3"+
    "\1\0\1\3\2\0\2\3\35\0\4\3\1\126\7\3"+
    "\1\127\13\3\1\130\7\3\1\0\6\3\1\0\1\3"+
    "\2\0\2\3\35\0\15\3\1\131\22\3\1\0\6\3"+
    "\1\0\1\3\2\0\2\3\35\0\27\3\1\132\10\3"+
    "\1\0\6\3\1\0\1\3\2\0\2\3\35\0\4\3"+
    "\1\133\6\3\1\134\14\3\1\135\7\3\1\0\6\3"+
    "\1\0\1\3\2\0\2\3\35\0\3\3\1\136\34\3"+
    "\1\0\6\3\1\0\1\3\2\0\2\3\35\0\7\3"+
    "\1\137\30\3\1\0\6\3\1\0\1\3\2\0\2\3"+
    "\35\0\13\3\1\140\24\3\1\0\6\3\1\0\1\3"+
    "\2\0\2\3\35\0\4\3\1\141\2\3\1\142\30\3"+
    "\1\0\6\3\1\0\1\3\2\0\2\3\35\0\21\3"+
    "\1\143\16\3\1\0\6\3\1\0\1\3\2\0\2\3"+
    "\35\0\13\3\1\144\24\3\1\0\6\3\1\0\1\3"+
    "\3\0\1\4\24\0\1\73\11\0\1\145\35\0\1\4"+
    "\5\0\1\4\1\145\1\0\1\4\2\0\2\146\35\0"+
    "\40\146\1\0\6\146\1\147\1\146\3\0\1\150\35\0"+
    "\1\151\12\0\1\151\23\0\1\150\5\0\1\150\2\0"+
    "\1\150\2\0\2\104\15\0\1\152\14\0\1\104\2\0"+
    "\47\104\1\0\1\104\2\0\2\105\35\0\40\105\1\0"+
    "\6\105\1\0\1\105\2\0\2\3\35\0\2\3\1\153"+
    "\35\3\1\0\6\3\1\0\1\3\2\0\2\3\35\0"+
    "\4\3\1\154\33\3\1\0\6\3\1\0\1\3\2\0"+
    "\2\3\35\0\22\3\1\155\15\3\1\0\6\3\1\0"+
    "\1\3\2\0\2\3\35\0\15\3\1\156\22\3\1\0"+
    "\6\3\1\0\1\3\2\0\2\3\35\0\3\3\1\157"+
    "\34\3\1\0\6\3\1\0\1\3\2\0\2\3\35\0"+
    "\7\3\1\157\30\3\1\0\6\3\1\0\1\3\2\0"+
    "\2\3\35\0\13\3\1\160\24\3\1\0\6\3\1\0"+
    "\1\3\2\0\2\3\35\0\15\3\1\161\22\3\1\0"+
    "\6\3\1\0\1\3\2\0\2\3\35\0\25\3\1\162"+
    "\12\3\1\0\6\3\1\0\1\3\2\0\2\3\35\0"+
    "\15\3\1\163\22\3\1\0\6\3\1\0\1\3\2\0"+
    "\2\3\35\0\30\3\1\164\7\3\1\0\6\3\1\0"+
    "\1\3\2\0\2\3\35\0\6\3\1\165\31\3\1\0"+
    "\6\3\1\0\1\3\2\0\2\3\35\0\5\3\1\166"+
    "\32\3\1\0\6\3\1\0\1\3\2\0\2\3\35\0"+
    "\30\3\1\167\7\3\1\0\6\3\1\0\1\3\2\0"+
    "\2\3\35\0\25\3\1\170\5\3\1\171\4\3\1\0"+
    "\6\3\1\0\1\3\2\0\2\3\35\0\14\3\1\172"+
    "\23\3\1\0\6\3\1\0\1\3\2\0\2\3\35\0"+
    "\6\3\1\173\31\3\1\0\6\3\1\0\1\3\2\0"+
    "\2\3\35\0\10\3\1\174\27\3\1\0\6\3\1\0"+
    "\1\3\2\0\2\3\35\0\14\3\1\175\23\3\1\0"+
    "\6\3\1\0\1\3\2\0\2\3\35\0\30\3\1\176"+
    "\7\3\1\0\6\3\1\0\1\3\2\0\2\3\35\0"+
    "\3\3\1\177\32\3\1\200\1\3\1\0\6\3\1\0"+
    "\1\3\2\0\2\3\35\0\10\3\1\200\27\3\1\0"+
    "\6\3\1\0\1\3\2\0\2\3\35\0\3\3\1\201"+
    "\34\3\1\0\6\3\1\0\1\3\2\0\2\3\35\0"+
    "\4\3\1\202\33\3\1\0\6\3\1\0\1\3\2\0"+
    "\2\3\35\0\6\3\1\203\31\3\1\0\6\3\1\0"+
    "\1\3\2\0\2\3\35\0\4\3\1\204\20\3\1\205"+
    "\12\3\1\0\6\3\1\0\1\3\2\0\2\3\35\0"+
    "\3\3\1\206\34\3\1\0\6\3\1\0\1\3\2\0"+
    "\2\3\35\0\14\3\1\112\23\3\1\0\6\3\1\0"+
    "\1\3\2\0\2\3\35\0\6\3\1\207\31\3\1\0"+
    "\6\3\1\0\1\3\2\0\2\3\35\0\40\3\1\0"+
    "\1\3\1\210\4\3\1\0\1\3\3\0\1\211\35\0"+
    "\1\211\1\0\1\211\1\0\1\211\4\0\3\211\2\0"+
    "\2\211\3\0\1\211\10\0\1\211\2\0\1\211\1\0"+
    "\1\211\3\0\1\211\2\0\1\211\3\0\1\150\74\0"+
    "\1\150\5\0\1\150\2\0\1\150\20\0\1\212\12\0"+
    "\1\212\115\0\1\213\54\0\2\3\35\0\3\3\1\214"+
    "\34\3\1\0\6\3\1\0\1\3\2\0\2\3\35\0"+
    "\25\3\1\165\12\3\1\0\6\3\1\0\1\3\2\0"+
    "\2\3\35\0\3\3\1\215\34\3\1\0\6\3\1\0"+
    "\1\3\2\0\2\3\35\0\13\3\1\216\24\3\1\0"+
    "\6\3\1\0\1\3\2\0\2\3\35\0\3\3\1\112"+
    "\34\3\1\0\6\3\1\0\1\3\2\0\2\3\35\0"+
    "\4\3\1\217\33\3\1\0\6\3\1\0\1\3\2\0"+
    "\2\3\35\0\13\3\1\220\24\3\1\0\6\3\1\0"+
    "\1\3\2\0\2\3\35\0\13\3\1\112\24\3\1\0"+
    "\6\3\1\0\1\3\2\0\2\3\35\0\30\3\1\221"+
    "\7\3\1\0\6\3\1\0\1\3\2\0\2\3\35\0"+
    "\13\3\1\222\24\3\1\0\6\3\1\0\1\3\2\0"+
    "\2\3\35\0\25\3\1\112\12\3\1\0\6\3\1\0"+
    "\1\3\2\0\2\3\35\0\4\3\1\223\33\3\1\0"+
    "\6\3\1\0\1\3\2\0\2\3\35\0\12\3\1\207"+
    "\25\3\1\0\6\3\1\0\1\3\2\0\2\3\35\0"+
    "\15\3\1\224\22\3\1\0\6\3\1\0\1\3\2\0"+
    "\2\3\35\0\6\3\1\225\31\3\1\0\6\3\1\0"+
    "\1\3\2\0\2\3\35\0\13\3\1\226\24\3\1\0"+
    "\6\3\1\0\1\3\2\0\2\3\35\0\10\3\1\227"+
    "\27\3\1\0\6\3\1\0\1\3\2\0\2\3\35\0"+
    "\15\3\1\230\22\3\1\0\6\3\1\0\1\3\2\0"+
    "\2\3\35\0\6\3\1\231\31\3\1\0\6\3\1\0"+
    "\1\3\2\0\2\3\35\0\4\3\1\232\33\3\1\0"+
    "\6\3\1\0\1\3\2\0\2\3\35\0\3\3\1\233"+
    "\34\3\1\0\6\3\1\0\1\3\2\0\2\3\35\0"+
    "\7\3\1\234\30\3\1\0\6\3\1\0\1\3\2\0"+
    "\2\3\35\0\15\3\1\223\22\3\1\0\6\3\1\0"+
    "\1\3\2\0\2\3\35\0\33\3\1\235\4\3\1\0"+
    "\6\3\1\0\1\3\2\0\2\3\35\0\17\3\1\112"+
    "\20\3\1\0\6\3\1\0\1\3\2\0\2\3\35\0"+
    "\17\3\1\236\20\3\1\0\6\3\1\0\1\3\2\0"+
    "\2\3\35\0\15\3\1\166\22\3\1\0\6\3\1\0"+
    "\1\3\2\0\2\3\35\0\25\3\1\164\12\3\1\0"+
    "\6\3\1\0\1\3\2\0\2\3\35\0\3\3\1\162"+
    "\34\3\1\0\6\3\1\0\1\3\2\0\2\3\35\0"+
    "\11\3\1\237\26\3\1\0\6\3\1\0\1\3\111\0"+
    "\1\240\2\0\2\3\35\0\4\3\1\241\33\3\1\0"+
    "\6\3\1\0\1\3\2\0\2\3\35\0\13\3\1\242"+
    "\24\3\1\0\6\3\1\0\1\3\2\0\2\3\35\0"+
    "\14\3\1\243\23\3\1\0\6\3\1\0\1\3\2\0"+
    "\2\3\35\0\40\3\1\0\2\3\1\112\3\3\1\0"+
    "\1\3\2\0\2\3\35\0\10\3\1\244\27\3\1\0"+
    "\6\3\1\0\1\3\2\0\2\3\35\0\14\3\1\245"+
    "\23\3\1\0\6\3\1\0\1\3\2\0\2\3\35\0"+
    "\6\3\1\246\31\3\1\0\6\3\1\0\1\3\2\0"+
    "\2\3\35\0\25\3\1\247\12\3\1\0\6\3\1\0"+
    "\1\3\2\0\2\3\35\0\10\3\1\250\27\3\1\0"+
    "\6\3\1\0\1\3\2\0\2\3\35\0\15\3\1\112"+
    "\22\3\1\0\6\3\1\0\1\3\2\0\2\3\35\0"+
    "\7\3\1\251\30\3\1\0\6\3\1\0\1\3\2\0"+
    "\2\3\35\0\10\3\1\252\27\3\1\0\6\3\1\0"+
    "\1\3\2\0\2\3\35\0\3\3\1\253\34\3\1\0"+
    "\6\3\1\0\1\3\2\0\2\3\35\0\7\3\1\254"+
    "\30\3\1\0\6\3\1\0\1\3\2\0\2\3\35\0"+
    "\14\3\1\255\23\3\1\0\6\3\1\0\1\3\2\0"+
    "\2\3\35\0\13\3\1\256\24\3\1\0\6\3\1\0"+
    "\1\3\2\0\2\3\35\0\26\3\1\257\3\3\1\260"+
    "\5\3\1\0\6\3\1\0\1\3\2\0\2\3\35\0"+
    "\14\3\1\261\23\3\1\0\6\3\1\0\1\3\2\0"+
    "\2\3\35\0\5\3\1\262\32\3\1\0\6\3\1\0"+
    "\1\3\2\0\2\3\35\0\5\3\1\263\32\3\1\0"+
    "\6\3\1\0\1\3\2\0\2\3\35\0\40\3\1\0"+
    "\1\264\5\3\1\0\1\3\2\0\2\3\35\0\17\3"+
    "\1\165\20\3\1\0\6\3\1\0\1\3\2\0\2\3"+
    "\35\0\10\3\1\112\27\3\1\0\6\3\1\0\1\3"+
    "\2\0\2\3\35\0\10\3\1\265\27\3\1\0\6\3"+
    "\1\0\1\3\2\0\2\3\35\0\6\3\1\266\31\3"+
    "\1\0\6\3\1\0\1\3\2\0\2\3\35\0\15\3"+
    "\1\267\22\3\1\0\6\3\1\0\1\3\2\0\2\3"+
    "\35\0\16\3\1\52\21\3\1\0\6\3\1\0\1\3"+
    "\2\0\2\3\35\0\27\3\1\112\10\3\1\0\6\3"+
    "\1\0\1\3\2\0\2\3\35\0\37\3\1\223\1\0"+
    "\6\3\1\0\1\3\2\0\2\3\35\0\2\3\1\112"+
    "\35\3\1\0\6\3\1\0\1\3\2\0\2\3\35\0"+
    "\26\3\1\270\11\3\1\0\6\3\1\0\1\3\2\0"+
    "\2\3\35\0\11\3\1\271\4\3\1\272\21\3\1\0"+
    "\6\3\1\0\1\3\2\0\2\3\35\0\10\3\1\273"+
    "\27\3\1\0\6\3\1\0\1\3\2\0\2\3\35\0"+
    "\6\3\1\274\31\3\1\0\6\3\1\0\1\3\2\0"+
    "\2\3\35\0\14\3\1\275\23\3\1\0\6\3\1\0"+
    "\1\3\2\0\2\3\35\0\4\3\1\276\33\3\1\0"+
    "\6\3\1\0\1\3\2\0\2\3\35\0\13\3\1\277"+
    "\24\3\1\0\6\3\1\0\1\3\2\0\2\3\35\0"+
    "\4\3\1\300\33\3\1\0\6\3\1\0\1\3\2\0"+
    "\2\3\35\0\15\3\1\301\22\3\1\0\6\3\1\0"+
    "\1\3\2\0\2\3\35\0\7\3\1\302\30\3\1\0"+
    "\6\3\1\0\1\3\2\0\2\3\35\0\13\3\1\303"+
    "\24\3\1\0\6\3\1\0\1\3\2\0\2\3\35\0"+
    "\27\3\1\304\10\3\1\0\6\3\1\0\1\3\2\0"+
    "\2\3\35\0\12\3\1\305\25\3\1\0\6\3\1\0"+
    "\1\3\2\0\2\3\35\0\13\3\1\306\24\3\1\0"+
    "\6\3\1\0\1\3\2\0\2\3\35\0\15\3\1\307"+
    "\22\3\1\0\6\3\1\0\1\3\2\0\2\3\35\0"+
    "\10\3\1\162\27\3\1\0\6\3\1\0\1\3\2\0"+
    "\2\3\35\0\4\3\1\310\33\3\1\0\6\3\1\0"+
    "\1\3\2\0\2\3\35\0\2\3\1\311\35\3\1\0"+
    "\6\3\1\0\1\3\2\0\2\3\35\0\10\3\1\312"+
    "\27\3\1\0\6\3\1\0\1\3\2\0\2\3\35\0"+
    "\2\3\1\162\35\3\1\0\6\3\1\0\1\3\2\0"+
    "\2\3\35\0\7\3\1\223\30\3\1\0\6\3\1\0"+
    "\1\3\2\0\2\3\35\0\10\3\1\223\27\3\1\0"+
    "\6\3\1\0\1\3\2\0\2\3\35\0\25\3\1\313"+
    "\12\3\1\0\6\3\1\0\1\3\2\0\2\3\35\0"+
    "\30\3\1\314\7\3\1\0\6\3\1\0\1\3\2\0"+
    "\2\3\35\0\6\3\1\315\31\3\1\0\6\3\1\0"+
    "\1\3\2\0\2\3\35\0\14\3\1\316\23\3\1\0"+
    "\6\3\1\0\1\3\2\0\2\3\35\0\13\3\1\317"+
    "\24\3\1\0\6\3\1\0\1\3\2\0\2\3\35\0"+
    "\36\3\1\112\1\3\1\0\6\3\1\0\1\3\2\0"+
    "\2\3\35\0\6\3\1\320\31\3\1\0\6\3\1\0"+
    "\1\3\2\0\2\3\35\0\15\3\1\165\22\3\1\0"+
    "\6\3\1\0\1\3\2\0\2\3\35\0\6\3\1\321"+
    "\31\3\1\0\6\3\1\0\1\3\2\0\2\3\35\0"+
    "\4\3\1\322\33\3\1\0\6\3\1\0\1\3\2\0"+
    "\2\3\35\0\13\3\1\323\24\3\1\0\6\3\1\0"+
    "\1\3\2\0\2\3\35\0\14\3\1\324\23\3\1\0"+
    "\6\3\1\0\1\3\2\0\2\3\35\0\27\3\1\325"+
    "\10\3\1\0\6\3\1\0\1\3\2\0\2\3\35\0"+
    "\7\3\1\326\30\3\1\0\6\3\1\0\1\3\2\0"+
    "\2\3\35\0\25\3\1\327\12\3\1\0\6\3\1\0"+
    "\1\3\2\0\2\3\35\0\3\3\1\223\34\3\1\0"+
    "\6\3\1\0\1\3\2\0\2\3\35\0\14\3\1\205"+
    "\23\3\1\0\6\3\1\0\1\3\2\0\2\3\35\0"+
    "\4\3\1\330\33\3\1\0\6\3\1\0\1\3\2\0"+
    "\2\3\35\0\13\3\1\142\24\3\1\0\6\3\1\0"+
    "\1\3\2\0\2\3\35\0\10\3\1\331\27\3\1\0"+
    "\6\3\1\0\1\3\2\0\2\3\35\0\11\3\1\332"+
    "\4\3\1\333\21\3\1\0\6\3\1\0\1\3\2\0"+
    "\2\3\35\0\17\3\1\166\20\3\1\0\6\3\1\0"+
    "\1\3\2\0\2\3\35\0\16\3\1\333\21\3\1\0"+
    "\6\3\1\0\1\3\2\0\2\3\35\0\12\3\1\334"+
    "\25\3\1\0\6\3\1\0\1\3\2\0\2\3\35\0"+
    "\13\3\1\335\24\3\1\0\6\3\1\0\1\3\2\0"+
    "\2\3\35\0\6\3\1\336\31\3\1\0\6\3\1\0"+
    "\1\3\2\0\2\3\35\0\14\3\1\337\23\3\1\0"+
    "\6\3\1\0\1\3\2\0\2\3\35\0\13\3\1\340"+
    "\24\3\1\0\6\3\1\0\1\3\2\0\2\3\35\0"+
    "\14\3\1\341\23\3\1\0\6\3\1\0\1\3\2\0"+
    "\2\3\35\0\14\3\1\265\23\3\1\0\6\3\1\0"+
    "\1\3\2\0\2\3\35\0\4\3\1\342\33\3\1\0"+
    "\6\3\1\0\1\3\2\0\2\3\35\0\17\3\1\301"+
    "\20\3\1\0\6\3\1\0\1\3\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14134];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\1\1\4\11\2\1\1\11"+
    "\1\1\4\11\1\1\1\11\1\1\7\11\36\1\1\0"+
    "\10\11\1\0\40\1\2\0\1\11\1\1\2\0\37\1"+
    "\2\0\24\1\1\11\102\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[226];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    private Symbol symbol(int type){
        return new Symbol(type, yyline, yycolumn);
    }

    private Symbol symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn, value);
    }
    public String retornoToken;
    public int fila;
    public int columna;
    public int tamanio;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  AnalizadorFlex(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 244) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { system.out.println("Error no registrado en analizador.");
            }
          case 48: break;
          case 2: 
            { return symbol(sym.Identificador, New String(yytext()));
            }
          case 49: break;
          case 3: 
            { return symbol(sym.ConstEnteraDecimal, New String(yytext()));
            }
          case 50: break;
          case 4: 
            { return symbol(sym.ExclamacionAbierto, New String(yytext()));
            }
          case 51: break;
          case 5: 
            { return symbol(sym.ExclamacionCerrado, New String(yytext()));
            }
          case 52: break;
          case 6: 
            { return symbol(sym.Arroba, New String(yytext()));
            }
          case 53: break;
          case 7: 
            { return symbol(sym.Sharp, New String(yytext()));
            }
          case 54: break;
          case 8: 
            { return symbol(sym.Dollar, New String(yytext()));
            }
          case 55: break;
          case 9: 
            { return symbol(sym.Porcentaje, New String(yytext()));
            }
          case 56: break;
          case 10: 
            { return symbol(sym.Ampersan, New String(yytext()));
            }
          case 57: break;
          case 11: 
            { return symbol(sym.ParentesisAbierto, New String(yytext()));
            }
          case 58: break;
          case 12: 
            { return symbol(sym.ParentesisCerrado, New String(yytext()));
            }
          case 59: break;
          case 13: 
            { return symbol(sym.QuestionCerrado, New String(yytext()));
            }
          case 60: break;
          case 14: 
            { return symbol(sym.QuestionAbierto, New String(yytext()));
            }
          case 61: break;
          case 15: 
            { return symbol(sym.Suma, New String(yytext()));
            }
          case 62: break;
          case 16: 
            { return symbol(sym.Mult, New String(yytext()));
            }
          case 63: break;
          case 17: 
            { return symbol(sym.CorcheteAbierto, New String(yytext()));
            }
          case 64: break;
          case 18: 
            { return symbol(sym.CorcheteCerrado, New String(yytext()));
            }
          case 65: break;
          case 19: 
            { return symbol(sym.LlaveAbierta, New String(yytext()));
            }
          case 66: break;
          case 20: 
            { return symbol(sym.LlaveCerrada, New String(yytext()));
            }
          case 67: break;
          case 21: 
            { return symbol(sym.Coma, New String(yytext()));
            }
          case 68: break;
          case 22: 
            { return symbol(sym.PuntoComa, New String(yytext()));
            }
          case 69: break;
          case 23: 
            { return symbol(sym.Punto, New String(yytext()));
            }
          case 70: break;
          case 24: 
            { return symbol(sym.DosPuntos, New String(yytext()));
            }
          case 71: break;
          case 25: 
            { return symbol(sym.GuionBajo, New String(yytext()));
            }
          case 72: break;
          case 26: 
            { return symbol(sym.Resta, New String(yytext()));
            }
          case 73: break;
          case 27: 
            { return symbol(sym.Menor, New String(yytext()));
            }
          case 74: break;
          case 28: 
            { return symbol(sym.Mayor, New String(yytext()));
            }
          case 75: break;
          case 29: 
            { return symbol(sym.Espacio, New String(yytext()));
            }
          case 76: break;
          case 30: 
            { return symbol(sym.Division , New String(yytext()));
            }
          case 77: break;
          case 31: 
            { return symbol(sym.Or, New String(yytext()));
            }
          case 78: break;
          case 32: 
            { /* Ignore */
            }
          case 79: break;
          case 33: 
            { return symbol(sym.Distinto, New String(yytext()));
            }
          case 80: break;
          case 34: 
            { return symbol(sym.Operador, New String(yytext()));
            }
          case 81: break;
          case 35: 
            { return symbol(sym.Parentesis, New String(yytext()));
            }
          case 82: break;
          case 36: 
            { return symbol(sym.Igual2, New String(yytext()));
            }
          case 83: break;
          case 37: 
            { return symbol(sym.Corchetes, New String(yytext()));
            }
          case 84: break;
          case 38: 
            { return symbol(sym.Llaves, New String(yytext()));
            }
          case 85: break;
          case 39: 
            { return symbol(sym.MenorIgual, New String(yytext()));
            }
          case 86: break;
          case 40: 
            { return symbol(sym.MayorIgual, New String(yytext()));
            }
          case 87: break;
          case 41: 
            { return symbol(sym.ComentarioLineal, New String(yytext()));
            }
          case 88: break;
          case 42: 
            { return symbol(sym.P_Reservada, New String(yytext()));
            }
          case 89: break;
          case 43: 
            { return symbol(sym.ConstString, New String(yytext()));
            }
          case 90: break;
          case 44: 
            { return symbol(sym.ConstDouble, New String(yytext()));
            }
          case 91: break;
          case 45: 
            { return symbol(sym.ConstEnteraHexa, New String(yytext()));
            }
          case 92: break;
          case 46: 
            { return symbol(sym.ConstBooleana, New String(yytext()));
            }
          case 93: break;
          case 47: 
            { return symbol(sym.ComentarioExtendido, New String(yytext()));
            }
          case 94: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
